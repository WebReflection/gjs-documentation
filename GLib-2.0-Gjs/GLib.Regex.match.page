<?xml version="1.0"?>
<page id="GLib.Regex.match"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Regex" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_regex_match</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>string</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.RegexMatchFlags</api:type>
        <api:name>match_options</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.Regex.prototype.match</title>
  <synopsis><code mime="text/x-gjs">
function match(string: String, match_options: <link xref="GLib.RegexMatchFlags">GLib.RegexMatchFlags</link>): [ok: Boolean, match_info: <link xref="GLib.MatchInfo">GLib.MatchInfo</link>] {
    // Gjs wrapper for g_regex_match()
}
  </code></synopsis>
  <p>Scans for a match in string for the pattern in <code>regex</code>.
The <code>match_options</code> are combined with the match options specified
when the <code>regex</code> structure was created, letting you have more
flexibility in reusing <link xref="GLib.Regex"/> structures.</p>  <p>A <link xref="GLib.MatchInfo"/> structure, used to get information on the match,
is stored in <code>match_info</code> if not <code>null</code>. Note that if <code>match_info</code>
is not <code>null</code> then it is created even if the function returns <code>false</code>,
i.e. you must free it regardless if regular expression actually matched.</p>  <p>To retrieve all the non-overlapping matches of the pattern in
string you can use <link xref="GLib.MatchInfo.next"/>.</p>  <p>|[&lt;!-- language="C" --&gt;
static void
print_uppercase_words (const gchar *string)
{
  // Print all uppercase-only words.
  GRegex *regex;
  GMatchInfo *match_info;
 
  regex = g_regex_new ("[A-Z]+", 0, 0, NULL);
  g_regex_match (regex, string, 0, &amp;match_info);
  while (g_match_info_matches (match_info))
    {
      gchar *word = g_match_info_fetch (match_info, 0);
      g_print ("Found: %s\n", word);
      g_free (word);
      g_match_info_next (match_info, NULL);
    }
  g_match_info_free (match_info);
  g_regex_unref (regex);
}
]|</p>  <p><code>string</code> is not copied and is used in <link xref="GLib.MatchInfo"/> internally. If
you use any <link xref="GLib.MatchInfo"/> method (except <link xref="GLib.MatchInfo.free"/>) after
freeing or modifying <code>string</code> then the behaviour is undefined.</p>
  <p>Since 2.14</p>
<terms>
<item>
<title><code>string</code></title>
  <p>the string to scan for matches</p>
</item>
<item>
<title><code>match_options</code></title>
  <p>match options</p>
</item>
<item>
<title><code>ok</code></title>

</item>
<item>
<title><code>match_info</code></title>
  <p>pointer to location where to store
    the <link xref="GLib.MatchInfo"/>, or <code>null</code> if you do not need it</p>
</item>
</terms>

</page>
