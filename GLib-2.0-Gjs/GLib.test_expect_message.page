<?xml version="1.0"?>
<page id="GLib.test_expect_message"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_test_expect_message</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>log_domain</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.LogLevelFlags</api:type>
        <api:name>log_level</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>pattern</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.test_expect_message</title>
  <synopsis><code mime="text/x-gjs">
function test_expect_message(log_domain: String, log_level: GLib.LogLevelFlags, pattern: String): void {
    // Gjs wrapper for g_test_expect_message()
}
  </code></synopsis>
  <p>Indicates that a message with the given <code>log_domain</code> and <code>log_level</code>,
with text matching <code>pattern</code>, is expected to be logged. When this
message is logged, it will not be printed, and the test case will
not abort.</p>  <p>Use g_test_assert_expected_messages() to assert that all
previously-expected messages have been seen and suppressed.</p>  <p>You can call this multiple times in a row, if multiple messages are
expected as a result of a single call. (The messages must appear in
the same order as the calls to <link xref="GLib.test_expect_message"/>.)</p>  <p>For example:</p>  <p>|[&lt;!-- language="C" --&gt;
  // <link xref="GLib.MainContext.push_thread_default"/> should fail if the
  // context is already owned by another thread.
  g_test_expect_message (G_LOG_DOMAIN,
                         G_LOG_LEVEL_CRITICAL,
                         "assertion*acquired_context*failed");
  g_main_context_push_thread_default (bad_context);
  g_test_assert_expected_messages ();
]|</p>  <p>Note that you cannot use this to test g_error() messages, since
g_error() intentionally never returns even if the program doesn't
abort; use <link xref="GLib.test_trap_subprocess"/> in this case.</p>  <p>If messages at <link xref="GLib.LogLevelFlags"/>.level_debug are emitted, but not explicitly
expected via <link xref="GLib.test_expect_message"/> then they will be ignored.</p>
  <p>Since 2.34</p>
<terms>
<item>
<title><code>log_domain</code></title>
  <p>the log domain of the message</p>
</item>
<item>
<title><code>log_level</code></title>
  <p>the log level of the message</p>
</item>
<item>
<title><code>pattern</code></title>
  <p>a glob-style [pattern][glib-Glob-style-pattern-matching]</p>
</item>
</terms>

</page>
