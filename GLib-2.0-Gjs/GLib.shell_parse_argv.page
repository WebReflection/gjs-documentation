<?xml version="1.0"?>
<page id="GLib.shell_parse_argv"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_shell_parse_argv</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>command_line</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.shell_parse_argv</title>
  <synopsis><code mime="text/x-gjs">
function shell_parse_argv(command_line: String): [ok: Boolean, argvp: Array(String)] {
    // Gjs wrapper for g_shell_parse_argv()
}
  </code></synopsis>
  <p>Parses a command line into an argument vector, in much the same way
the shell would, but without many of the expansions the shell would
perform (variable expansion, globs, operators, filename expansion,
etc. are not supported). The results are defined to be the same as
those you would get from a UNIX98 /bin/sh, as long as the input
contains none of the unsupported shell expansions. If the input
does contain such expansions, they are passed through
literally. Possible errors are those from the #G_SHELL_ERROR
domain. Free the returned vector with <link xref="GLib.strfreev"/>.</p>

<terms>
<item>
<title><code>command_line</code></title>
  <p>command line to parse</p>
</item>
<item>
<title><code>ok</code></title>

</item>
<item>
<title><code>argvp</code></title>
  <p>return location for array of args</p>
</item>
</terms>

</page>
