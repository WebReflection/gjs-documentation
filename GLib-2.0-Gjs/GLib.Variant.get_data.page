<?xml version="1.0"?>
<page id="GLib.Variant.get_data"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Variant" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>gpointer</api:type>
      </api:returns>
      <api:name>g_variant_get_data</api:name>
    </api:function>
  </info>
  <title>GLib.Variant.prototype.get_data</title>
  <synopsis><code mime="text/x-gjs">
function get_data(): gpointer {
    // Gjs wrapper for g_variant_get_data()
}
  </code></synopsis>
  <p>Returns a pointer to the serialised form of a <link xref="GLib.Variant"/> instance.
The returned data may not be in fully-normalised form if read from an
untrusted source.  The returned data must not be freed; it remains
valid for as long as <code>value</code> exists.</p>  <p>If <code>value</code> is a fixed-sized value that was deserialised from a
corrupted serialised container then <code>null</code> may be returned.  In this
case, the proper thing to do is typically to use the appropriate
number of nul bytes in place of <code>value</code>.  If <code>value</code> is not fixed-sized
then <code>null</code> is never returned.</p>  <p>In the case that <code>value</code> is already in serialised form, this function
is O(1).  If the value is not already in serialised form,
serialisation occurs implicitly and is approximately O(n) in the size
of the result.</p>  <p>To deserialise the data returned by this function, in addition to the
serialised data, you must know the type of the <link xref="GLib.Variant"/>, and (if the
machine might be different) the endianness of the machine that stored
it. As a result, file formats or network messages that incorporate
serialised <link xref="GLib.Variant"/>&lt;!----&gt;s must include this information either
implicitly (for instance "the file always contains a
%G_VARIANT_TYPE_VARIANT and it is always in little-endian order") or
explicitly (by storing the type and/or endianness in addition to the
serialised data).</p>
  <p>Since 2.24</p>
<terms>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
