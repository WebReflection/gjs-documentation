<?xml version="1.0"?>
<page id="GLib.ThreadPool.free"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.ThreadPool" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_thread_pool_free</api:name>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>immediate</api:name>
      </api:arg>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>wait_</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.ThreadPool.prototype.free</title>
  <synopsis><code mime="text/x-gjs">
function free(immediate: Boolean, wait_: Boolean): void {
    // Gjs wrapper for g_thread_pool_free()
}
  </code></synopsis>
  <p>Frees all resources allocated for <code>pool</code>.</p>  <p>If <code>immediate</code> is <code>true</code>, no new task is processed for <code>pool</code>.
Otherwise <code>pool</code> is not freed before the last task is processed.
Note however, that no thread of this pool is interrupted while
processing a task. Instead at least all still running threads
can finish their tasks before the <code>pool</code> is freed.</p>  <p>If <code>wait_</code> is <code>true</code>, the functions does not return before all
tasks to be processed (dependent on <code>immediate</code>, whether all
or only the currently running) are ready.
Otherwise the function returns immediately.</p>  <p>After calling this function <code>pool</code> must not be used anymore.</p>

<terms>
<item>
<title><code>immediate</code></title>
  <p>should <code>pool</code> shut down immediately?</p>
</item>
<item>
<title><code>wait_</code></title>
  <p>should the function wait for all tasks to be finished?</p>
</item>
</terms>

</page>
