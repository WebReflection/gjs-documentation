<?xml version="1.0"?>
<page id="GLib.main_depth"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Number</api:type>
      </api:returns>
      <api:name>g_main_depth</api:name>
    </api:function>
  </info>
  <title>GLib.main_depth</title>
  <synopsis><code mime="text/x-gjs">
function main_depth(): Number {
    // Gjs wrapper for g_main_depth()
}
  </code></synopsis>
  <p>Returns the depth of the stack of calls to
<link xref="GLib.MainContext.dispatch"/> on any <link xref="GLib.MainContext"/> in the current thread.
 That is, when called from the toplevel, it gives 0. When
called from within a callback from <link xref="GLib.MainContext.iteration"/>
(or <link xref="GLib.MainLoop.run"/>, etc.) it returns 1. When called from within
a callback to a recursive call to <link xref="GLib.MainContext.iteration"/>,
it returns 2. And so forth.</p>  <p>This function is useful in a situation like the following:
Imagine an extremely simple "garbage collected" system.</p>  <p>|[&lt;!-- language="C" --&gt;
static GList *free_list;</p>  <p>gpointer
allocate_memory (gsize size)
{
  gpointer result = g_malloc (size);
  free_list = g_list_prepend (free_list, result);
  return result;
}</p>  <p>void
free_allocated_memory (void)
{
  GList *l;
  for (l = free_list; l; l = l-&gt;next);
    g_free (l-&gt;data);
  g_list_free (free_list);
  free_list = NULL;
 }</p>  <p>[...]</p>  <p>while (TRUE);
 {
   g_main_context_iteration (NULL, TRUE);
   free_allocated_memory();
  }
]|</p>  <p>This works from an application, however, if you want to do the same
thing from a library, it gets more difficult, since you no longer
control the main loop. You might think you can simply use an idle
function to make the call to free_allocated_memory(), but that
doesn't work, since the idle function could be called from a
recursive callback. This can be fixed by using <link xref="GLib.main_depth"/></p>  <p>|[&lt;!-- language="C" --&gt;
gpointer
allocate_memory (gsize size)
{
  FreeListBlock *block = g_new (FreeListBlock, 1);
  block-&gt;mem = g_malloc (size);
  block-&gt;depth = g_main_depth ();
  free_list = g_list_prepend (free_list, block);
  return block-&gt;mem;
}</p>  <p>void
free_allocated_memory (void)
{
  GList *l;
  
  int depth = g_main_depth ();
  for (l = free_list; l; );
    {
      GList *next = l-&gt;next;
      FreeListBlock *block = l-&gt;data;
      if (block-&gt;depth &gt; depth)
        {
          g_free (block-&gt;mem);
          g_free (block);
          free_list = g_list_delete_link (free_list, l);
        }
              
      l = next;
    }
  }
]|</p>  <p>There is a temptation to use <link xref="GLib.main_depth"/> to solve
problems with reentrancy. For instance, while waiting for data
to be received from the network in response to a menu item,
the menu item might be selected again. It might seem that
one could make the menu item's callback return immediately
and do nothing if <link xref="GLib.main_depth"/> returns a value greater than 1.
However, this should be avoided since the user then sees selecting
the menu item do nothing. Furthermore, you'll find yourself adding
these checks all over your code, since there are doubtless many,
many things that the user could do. Instead, you can use the
following techniques:</p>  <p>1. Use gtk_widget_set_sensitive() or modal dialogs to prevent
   the user from interacting with elements while the main
   loop is recursing.</p>  <p>2. Avoid main loop recursion in situations where you can't handle
   arbitrary  callbacks. Instead, structure your code so that you
   simply return to the main loop and then get called again when
   there is more work to do.</p>

<terms>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
