<?xml version="1.0"?>
<page id="GLib.base64_encode_step"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>gsize</api:type>
      </api:returns>
      <api:name>g_base64_encode_step</api:name>
      <api:arg>
        <api:type>Array(guint8)</api:type>
        <api:name>in</api:name>
      </api:arg>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>break_lines</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>state</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>save</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.base64_encode_step</title>
  <synopsis><code mime="text/x-gjs">
function base64_encode_step(in: Array(guint8), break_lines: Boolean, state: Number, save: Number): [return_value: gsize, out: Array(guint8), state: Number, save: Number] {
    // Gjs wrapper for g_base64_encode_step()
}
  </code></synopsis>
  <p>Incrementally encode a sequence of binary data into its Base-64 stringified
representation. By calling this function multiple times you can convert
data in chunks to avoid having to have the full encoded data in memory.</p>  <p>When all of the data has been converted you must call
<link xref="GLib.base64_encode_close"/> to flush the saved state.</p>  <p>The output buffer must be large enough to fit all the data that will
be written to it. Due to the way base64 encodes you will need
at least: (<code>len</code> / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of
non-zero state). If you enable line-breaking you will need at least:
((<code>len</code> / 3 + 1) * 4 + 4) / 72 + 1 bytes of extra space.</p>  <p><code>break_lines</code> is typically used when putting base64-encoded data in emails.
It breaks the lines at 72 columns instead of putting all of the text on
the same line. This avoids problems with long lines in the email system.
Note however that it breaks the lines with `LF` characters, not
`CR LF` sequences, so the result cannot be passed directly to SMTP
or certain other protocols.</p>
  <p>Since 2.12</p>
<terms>
<item>
<title><code>in</code></title>
  <p>the binary data to encode</p>
</item>
<item>
<title><code>break_lines</code></title>
  <p>whether to break long lines</p>
</item>
<item>
<title><code>state</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
<item>
<title><code>save</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
<item>
<title><code>return_value</code></title>

</item>
<item>
<title><code>out</code></title>
  <p>pointer to destination buffer</p>
</item>
<item>
<title><code>state (out)</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
<item>
<title><code>save (out)</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
</terms>

</page>
