<?xml version="1.0"?>
<page id="GLib.RWLock"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>GLib.RWLock</title>
  <synopsis><code>
const GLib = imports.gi.GLib;

let rWLock = new GLib.RWLock();
  </code></synopsis>
  <p>The GRWLock struct is an opaque data structure to represent a
reader-writer lock. It is similar to a <link xref="GLib.Mutex"/> in that it allows
multiple threads to coordinate access to a shared resource.</p>  <p>The difference to a mutex is that a reader-writer lock discriminates
between read-only ('reader') and full ('writer') access. While only
one thread at a time is allowed write access (by holding the 'writer'
lock via <link xref="GLib.writer_lock"/>), multiple threads can gain
simultaneous read-only access (by holding the 'reader' lock via
<link xref="GLib.reader_lock"/>).</p>  <p>Here is an example for an array with access functions:
|[&lt;!-- language="C" --&gt;
  GRWLock lock;
  GPtrArray *array;</p>  <p>  gpointer
  my_array_get (guint index)
  {
    gpointer retval = NULL;</p>  <p>    if (!array)
      return NULL;</p>  <p>    g_rw_lock_reader_lock (&amp;lock);
    if (index &lt; array-&gt;len)
      retval = g_ptr_array_index (array, index);
    g_rw_lock_reader_unlock (&amp;lock);</p>  <p>    return retval;
  }</p>  <p>  void
  my_array_set (guint index, gpointer data)
  {
    g_rw_lock_writer_lock (&amp;lock);</p>  <p>    if (!array)
      array = g_ptr_array_new ();</p>  <p>    if (index &gt;= array-&gt;len)
      g_ptr_array_set_size (array, index+1);
    g_ptr_array_index (array, index) = data;</p>  <p>    g_rw_lock_writer_unlock (&amp;lock);
  }
 ]|
This example shows an array which can be accessed by many readers
(the my_array_get() function) simultaneously, whereas the writers
(the my_array_set() function) will only be allowed one at a time
and only if no readers currently access the array. This is because
of the potentially dangerous resizing of the array. Using these
functions is fully multi-thread safe now.</p>  <p>If a <link xref="GLib.RWLock"/> is allocated in static storage then it can be used
without initialisation.  Otherwise, you should call
<link xref="GLib.init"/> on it and <link xref="GLib.clear"/> when done.</p>  <p>A GRWLock should only be accessed with the g_rw_lock_ functions.</p>
  <p>Since 2.32</p>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
