<?xml version="1.0"?>
<page id="GLib.spawn_async_with_pipes"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_spawn_async_with_pipes</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>working_directory</api:name>
      </api:arg>
      <api:arg>
        <api:type>Array(String)</api:type>
        <api:name>argv</api:name>
      </api:arg>
      <api:arg>
        <api:type>Array(String)</api:type>
        <api:name>envp</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.SpawnFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.SpawnChildSetupFunc</api:type>
        <api:name>child_setup</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.spawn_async_with_pipes</title>
  <synopsis><code mime="text/x-gjs">
function spawn_async_with_pipes(working_directory: String, argv: Array(String), envp: Array(String), flags: GLib.SpawnFlags, child_setup: GLib.SpawnChildSetupFunc): [ok: Boolean, child_pid: GLib.Pid, standard_input: Number, standard_output: Number, standard_error: Number] {
    // Gjs wrapper for g_spawn_async_with_pipes()
}
  </code></synopsis>
  <p>Executes a child program asynchronously (your program will not
block waiting for the child to exit). The child program is
specified by the only argument that must be provided, <code>argv</code>.
<code>argv</code> should be a <code>null</code>-terminated array of strings, to be passed
as the argument vector for the child. The first string in <code>argv</code>
is of course the name of the program to execute. By default, the
name of the program must be a full path. If <code>flags</code> contains the
<link xref="GLib.SpawnFlags"/>.search_path flag, the `PATH` environment variable is
used to search for the executable. If <code>flags</code> contains the
<link xref="GLib.SpawnFlags"/>.search_path_from_envp flag, the `PATH` variable from
<code>envp</code> is used to search for the executable. If both the
<link xref="GLib.SpawnFlags"/>.search_path and <link xref="GLib.SpawnFlags"/>.search_path_from_envp flags
are set, the `PATH` variable from <code>envp</code> takes precedence over
the environment variable.</p>  <p>If the program name is not a full path and <link xref="GLib.SpawnFlags"/>.search_path flag is not
used, then the program will be run from the current directory (or
<code>working_directory</code>, if specified); this might be unexpected or even
dangerous in some cases when the current directory is world-writable.</p>  <p>On Windows, note that all the string or string vector arguments to
this function and the other g_spawn*() functions are in UTF-8, the
GLib file name encoding. Unicode characters that are not part of
the system codepage passed in these arguments will be correctly
available in the spawned program only if it uses wide character API
to retrieve its command line. For C programs built with Microsoft's
tools it is enough to make the program have a wmain() instead of
main(). wmain() has a wide character argument vector as parameter.</p>  <p>At least currently, mingw doesn't support wmain(), so if you use
mingw to develop the spawned program, it will have to call the
undocumented function __wgetmainargs() to get the wide character
argument vector and environment. See gspawn-win32-helper.c in the
GLib sources or init.c in the mingw runtime sources for a prototype
for that function. Alternatively, you can retrieve the Win32 system
level wide character command line passed to the spawned program
using the GetCommandLineW() function.</p>  <p>On Windows the low-level child process creation API CreateProcess()
doesn't use argument vectors, but a command line. The C runtime
library's spawn*() family of functions (which <link xref="GLib.spawn_async_with_pipes"/>
eventually calls) paste the argument vector elements together into
a command line, and the C runtime startup code does a corresponding
reconstruction of an argument vector from the command line, to be
passed to main(). Complications arise when you have argument vector
elements that contain spaces of double quotes. The spawn*() functions
don't do any quoting or escaping, but on the other hand the startup
code does do unquoting and unescaping in order to enable receiving
arguments with embedded spaces or double quotes. To work around this
asymmetry, <link xref="GLib.spawn_async_with_pipes"/> will do quoting and escaping on
argument vector elements that need it before calling the C runtime
spawn() function.</p>  <p>The returned <code>child_pid</code> on Windows is a handle to the child
process, not its identifier. Process handles and process
identifiers are different concepts on Windows.</p>  <p><code>envp</code> is a <code>null</code>-terminated array of strings, where each string
has the form `KEY=VALUE`. This will become the child's environment.
If <code>envp</code> is <code>null</code>, the child inherits its parent's environment.</p>  <p><code>flags</code> should be the bitwise OR of any flags you want to affect the
function's behaviour. The <link xref="GLib.SpawnFlags"/>.do_not_reap_child means that the
child will not automatically be reaped; you must use a child watch to
be notified about the death of the child process. Eventually you must
call <link xref="GLib.spawn_close_pid"/> on the <code>child_pid</code>, in order to free
resources which may be associated with the child process. (On Unix,
using a child watch is equivalent to calling waitpid() or handling
the %SIGCHLD signal manually. On Windows, calling <link xref="GLib.spawn_close_pid"/>
is equivalent to calling CloseHandle() on the process handle returned
in <code>child_pid</code>). See <link xref="GLib.child_watch_add"/>.</p>  <p><link xref="GLib.SpawnFlags"/>.leave_descriptors_open means that the parent's open file
descriptors will be inherited by the child; otherwise all descriptors
except stdin/stdout/stderr will be closed before calling exec() in
the child. <link xref="GLib.SpawnFlags"/>.search_path means that <code>argv</code>[0] need not be an
absolute path, it will be looked for in the `PATH` environment
variable. <link xref="GLib.SpawnFlags"/>.search_path_from_envp means need not be an
absolute path, it will be looked for in the `PATH` variable from
<code>envp</code>. If both <link xref="GLib.SpawnFlags"/>.search_path and <link xref="GLib.SpawnFlags"/>.search_path_from_envp
are used, the value from <code>envp</code> takes precedence over the environment.
<link xref="GLib.SpawnFlags"/>.stdout_to_dev_null means that the child's standard output
will be discarded, instead of going to the same location as the parent's
standard output. If you use this flag, <code>standard_output</code> must be <code>null</code>.
<link xref="GLib.SpawnFlags"/>.stderr_to_dev_null means that the child's standard error
will be discarded, instead of going to the same location as the parent's
standard error. If you use this flag, <code>standard_error</code> must be <code>null</code>.
<link xref="GLib.SpawnFlags"/>.child_inherits_stdin means that the child will inherit the parent's
standard input (by default, the child's standard input is attached to
/dev/null). If you use this flag, <code>standard_input</code> must be <code>null</code>.
<link xref="GLib.SpawnFlags"/>.file_and_argv_zero means that the first element of <code>argv</code> is
the file to execute, while the remaining elements are the actual
argument vector to pass to the file. Normally <link xref="GLib.spawn_async_with_pipes"/>
uses <code>argv</code>[0] as the file to execute, and passes all of <code>argv</code> to the child.</p>  <p><code>child_setup</code> and <code>user_data</code> are a function and user data. On POSIX
platforms, the function is called in the child after GLib has
performed all the setup it plans to perform (including creating
pipes, closing file descriptors, etc.) but before calling exec().
That is, <code>child_setup</code> is called just before calling exec() in the
child. Obviously actions taken in this function will only affect
the child, not the parent.</p>  <p>On Windows, there is no separate fork() and exec() functionality.
Child processes are created and run with a single API call,
CreateProcess(). There is no sensible thing <code>child_setup</code>
could be used for on Windows so it is ignored and not called.</p>  <p>If non-<code>null</code>, <code>child_pid</code> will on Unix be filled with the child's
process ID. You can use the process ID to send signals to the child,
or to use <link xref="GLib.child_watch_add"/> (or waitpid()) if you specified the
<link xref="GLib.SpawnFlags"/>.do_not_reap_child flag. On Windows, <code>child_pid</code> will be
filled with a handle to the child process only if you specified the
<link xref="GLib.SpawnFlags"/>.do_not_reap_child flag. You can then access the child
process using the Win32 API, for example wait for its termination
with the WaitFor*() functions, or examine its exit code with
GetExitCodeProcess(). You should close the handle with CloseHandle()
or <link xref="GLib.spawn_close_pid"/> when you no longer need it.</p>  <p>If non-<code>null</code>, the <code>standard_input</code>, <code>standard_output</code>, <code>standard_error</code>
locations will be filled with file descriptors for writing to the child's
standard input or reading from its standard output or standard error.
The caller of <link xref="GLib.spawn_async_with_pipes"/> must close these file descriptors
when they are no longer in use. If these parameters are <code>null</code>, the
corresponding pipe won't be created.</p>  <p>If <code>standard_input</code> is NULL, the child's standard input is attached to
/dev/null unless <link xref="GLib.SpawnFlags"/>.child_inherits_stdin is set.</p>  <p>If <code>standard_error</code> is NULL, the child's standard error goes to the same
location as the parent's standard error unless <link xref="GLib.SpawnFlags"/>.stderr_to_dev_null
is set.</p>  <p>If <code>standard_output</code> is NULL, the child's standard output goes to the same
location as the parent's standard output unless <link xref="GLib.SpawnFlags"/>.stdout_to_dev_null
is set.</p>  <p>@error can be <code>null</code> to ignore errors, or non-<code>null</code> to report errors.
If an error is set, the function returns <code>false</code>. Errors are reported
even if they occur in the child (for example if the executable in
<code>argv</code>[0] is not found). Typically the `message` field of returned
errors should be displayed to users. Possible errors are those from
the #G_SPAWN_ERROR domain.</p>  <p>If an error occurs, <code>child_pid</code>, <code>standard_input</code>, <code>standard_output</code>,
and <code>standard_error</code> will not be filled with valid values.</p>  <p>If <code>child_pid</code> is not <code>null</code> and an error does not occur then the returned
process reference must be closed using <link xref="GLib.spawn_close_pid"/>.</p>  <p>If you are writing a GTK+ application, and the program you
are spawning is a graphical application, too, then you may
want to use gdk_spawn_on_screen_with_pipes() instead to ensure that
the spawned program opens its windows on the right screen.</p>

<terms>
<item>
<title><code>working_directory</code></title>
  <p>child's current working directory, or <code>null</code> to inherit parent's, in the GLib file name encoding</p>
</item>
<item>
<title><code>argv</code></title>
  <p>child's argument vector, in the GLib file name encoding</p>
</item>
<item>
<title><code>envp</code></title>
  <p>child's environment, or <code>null</code> to inherit parent's, in the GLib file name encoding</p>
</item>
<item>
<title><code>flags</code></title>
  <p>flags from <link xref="GLib.SpawnFlags"/></p>
</item>
<item>
<title><code>child_setup</code></title>
  <p>function to run in the child just before exec()</p>
</item>
<item>
<title><code>ok</code></title>

</item>
<item>
<title><code>child_pid</code></title>
  <p>return location for child process ID, or <code>null</code></p>
</item>
<item>
<title><code>standard_input</code></title>
  <p>return location for file descriptor to write to child's stdin, or <code>null</code></p>
</item>
<item>
<title><code>standard_output</code></title>
  <p>return location for file descriptor to read child's stdout, or <code>null</code></p>
</item>
<item>
<title><code>standard_error</code></title>
  <p>return location for file descriptor to read child's stderr, or <code>null</code></p>
</item>
</terms>

</page>
