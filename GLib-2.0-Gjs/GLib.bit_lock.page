<?xml version="1.0"?>
<page id="GLib.bit_lock"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_bit_lock</api:name>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>address</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>lock_bit</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.bit_lock</title>
  <synopsis><code mime="text/x-gjs">
function bit_lock(address: Number, lock_bit: Number): void {
    // Gjs wrapper for g_bit_lock()
}
  </code></synopsis>
  <p>Sets the indicated <code>lock_bit</code> in <code>address</code>.  If the bit is already
set, this call will block until <link xref="GLib.bit_unlock"/> unsets the
corresponding bit.</p>  <p>Attempting to lock on two different bits within the same integer is
not supported and will very probably cause deadlocks.</p>  <p>The value of the bit that is set is (1u &lt;&lt; @bit).  If @bit is not
between 0 and 31 then the result is undefined.</p>  <p>This function accesses <code>address</code> atomically.  All other accesses to
<code>address</code> must be atomic in order for this function to work
reliably.</p>
  <p>Since 2.24</p>
<terms>
<item>
<title><code>address</code></title>
  <p>a pointer to an integer</p>
</item>
<item>
<title><code>lock_bit</code></title>
  <p>a bit value between 0 and 31</p>
</item>
</terms>

</page>
