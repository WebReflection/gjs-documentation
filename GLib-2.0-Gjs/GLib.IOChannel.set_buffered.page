<?xml version="1.0"?>
<page id="GLib.IOChannel.set_buffered"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.IOChannel" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_io_channel_set_buffered</api:name>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>buffered</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.IOChannel.prototype.set_buffered</title>
  <synopsis><code mime="text/x-gjs">
function set_buffered(buffered: Boolean): void {
    // Gjs wrapper for g_io_channel_set_buffered()
}
  </code></synopsis>
  <p>The buffering state can only be set if the channel's encoding
is <code>null</code>. For any other encoding, the channel must be buffered.</p>  <p>A buffered channel can only be set unbuffered if the channel's
internal buffers have been flushed. Newly created channels or
channels which have returned <link xref="GLib.IOStatus"/>.eof
not require such a flush. For write-only channels, a call to
g_io_channel_flush () is sufficient. For all other channels,
the buffers may be flushed by a call to g_io_channel_seek_position ().
This includes the possibility of seeking with seek type <link xref="GLib.SeekType"/>.cur
and an offset of zero. Note that this means that socket-based
channels cannot be set unbuffered once they have had data
read from them.</p>  <p>On unbuffered channels, it is safe to mix read and write
calls from the new and old APIs, if this is necessary for
maintaining old code.</p>  <p>The default state of the channel is buffered.</p>

<terms>
<item>
<title><code>buffered</code></title>
  <p>whether to set the channel buffered or unbuffered</p>
</item>
</terms>

</page>
