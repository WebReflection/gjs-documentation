<?xml version="1.0"?>
<page id="GLib.RWLock.init"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.RWLock" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_rw_lock_init</api:name>
    </api:function>
  </info>
  <title>GLib.RWLock.prototype.init</title>
  <synopsis><code mime="text/x-gjs">
function init(): void {
    // Gjs wrapper for g_rw_lock_init()
}
  </code></synopsis>
  <p>Initializes a <link xref="GLib.RWLock"/> so that it can be used.</p>  <p>This function is useful to initialize a lock that has been
allocated on the stack, or as part of a larger structure.  It is not
necessary to initialise a reader-writer lock that has been statically
allocated.</p>  <p>|[&lt;!-- language="C" --&gt;
  typedef struct {
    GRWLock l;
    ...
  } Blob;</p>  <p>Blob *b;</p>  <p>b = g_new (Blob, 1);
g_rw_lock_init (&amp;b-&gt;l);
]|</p>  <p>To undo the effect of <link xref="GLib.RWLock.init"/> when a lock is no longer
needed, use <link xref="GLib.RWLock.clear"/>.</p>  <p>Calling <link xref="GLib.RWLock.init"/> on an already initialized <link xref="GLib.RWLock"/> leads
to undefined behaviour.</p>
  <p>Since 2.32</p>

</page>
