<?xml version="1.0"?>
<page id="GLib.spawn_check_exit_status"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_spawn_check_exit_status</api:name>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>exit_status</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.spawn_check_exit_status</title>
  <synopsis><code mime="text/x-gjs">
function spawn_check_exit_status(exit_status: Number): Boolean {
    // Gjs wrapper for g_spawn_check_exit_status()
}
  </code></synopsis>
  <p>Set @error if <code>exit_status</code> indicates the child exited abnormally
(e.g. with a nonzero exit code, or via a fatal signal).</p>  <p>The <link xref="GLib.spawn_sync"/> and <link xref="GLib.child_watch_add"/> family of APIs return an
exit status for subprocesses encoded in a platform-specific way.
On Unix, this is guaranteed to be in the same format waitpid() returns,
and on Windows it is guaranteed to be the result of GetExitCodeProcess().</p>  <p>Prior to the introduction of this function in GLib 2.34, interpreting
<code>exit_status</code> required use of platform-specific APIs, which is problematic
for software using GLib as a cross-platform layer.</p>  <p>Additionally, many programs simply want to determine whether or not
the child exited successfully, and either propagate a <link xref="GLib.Error"/> or
print a message to standard error. In that common case, this function
can be used. Note that the error message in @error will contain
human-readable information about the exit status.</p>  <p>The @domain and @code of @error have special semantics in the case
where the process has an "exit code", as opposed to being killed by
a signal. On Unix, this happens if WIFEXITED() would be true of
<code>exit_status</code>. On Windows, it is always the case.</p>  <p>The special semantics are that the actual exit code will be the
code set in @error, and the domain will be %G_SPAWN_EXIT_ERROR.
This allows you to differentiate between different exit codes.</p>  <p>If the process was terminated by some means other than an exit
status, the domain will be %G_SPAWN_ERROR, and the code will be
<link xref="GLib.SpawnError"/>.failed.</p>  <p>This function just offers convenience; you can of course also check
the available platform via a macro such as %G_OS_UNIX, and use
WIFEXITED() and WEXITSTATUS() on <code>exit_status</code> directly. Do not attempt
to scan or parse the error message string; it may be translated and/or
change in future versions of GLib.</p>
  <p>Since 2.34</p>
<terms>
<item>
<title><code>exit_status</code></title>
  <p>An exit code as returned from <link xref="GLib.spawn_sync"/></p>
</item>
<item>
<title><code>ok</code></title>

</item>
</terms>

</page>
