<?xml version="1.0"?>
<page id="GLib.Variant.new_from_data"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Variant" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>GLib.Variant</api:type>
      </api:returns>
      <api:name>g_variant_new_from_data</api:name>
      <api:arg>
        <api:type>GLib.VariantType</api:type>
        <api:name>type</api:name>
      </api:arg>
      <api:arg>
        <api:type>Array(guint8)</api:type>
        <api:name>data</api:name>
      </api:arg>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>trusted</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.DestroyNotify</api:type>
        <api:name>notify</api:name>
      </api:arg>
      <api:arg>
        <api:type>gpointer</api:type>
        <api:name>user_data</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.Variant.new_from_data</title>
  <synopsis><code mime="text/x-gjs">
function new_from_data(type: GLib.VariantType, data: Array(guint8), trusted: Boolean, notify: GLib.DestroyNotify, user_data: gpointer): GLib.Variant {
    // Gjs wrapper for g_variant_new_from_data()
}
  </code></synopsis>
  <p>Creates a new <link xref="GLib.Variant"/> instance from serialised data.</p>  <p><code>type</code> is the type of <link xref="GLib.Variant"/> instance that will be constructed.
The interpretation of <code>data</code> depends on knowing the type.</p>  <p><code>data</code> is not modified by this function and must remain valid with an
unchanging value until such a time as <code>notify</code> is called with
<code>user_data</code>.  If the contents of <code>data</code> change before that time then
the result is undefined.</p>  <p>If <code>data</code> is trusted to be serialised data in normal form then
<code>trusted</code> should be <code>true</code>.  This applies to serialised data created
within this process or read from a trusted location on the disk (such
as a file installed in /usr/lib alongside your application).  You
should set trusted to <code>false</code> if <code>data</code> is read from the network, a
file in the user's home directory, etc.</p>  <p>If <code>data</code> was not stored in this machine's native endianness, any multi-byte
numeric values in the returned variant will also be in non-native
endianness. <link xref="GLib.byteswap"/> can be used to recover the original values.</p>  <p><code>notify</code> will be called with <code>user_data</code> when <code>data</code> is no longer
needed.  The exact time of this call is unspecified and might even be
before this function returns.</p>
  <p>Since 2.24</p>
<terms>
<item>
<title><code>type</code></title>
  <p>a definite <link xref="GLib.VariantType"/></p>
</item>
<item>
<title><code>data</code></title>
  <p>the serialised data</p>
</item>
<item>
<title><code>trusted</code></title>
  <p><code>true</code> if <code>data</code> is definitely in normal form</p>
</item>
<item>
<title><code>notify</code></title>
  <p>function to call when <code>data</code> is no longer needed</p>
</item>
<item>
<title><code>user_data</code></title>
  <p>data for <code>notify</code></p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
