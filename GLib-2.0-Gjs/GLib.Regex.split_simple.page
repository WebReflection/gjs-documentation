<?xml version="1.0"?>
<page id="GLib.Regex.split_simple"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Regex" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Array(String)</api:type>
      </api:returns>
      <api:name>g_regex_split_simple</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>pattern</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>string</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.RegexCompileFlags</api:type>
        <api:name>compile_options</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.RegexMatchFlags</api:type>
        <api:name>match_options</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.Regex.split_simple</title>
  <synopsis><code mime="text/x-gjs">
function split_simple(pattern: String, string: String, compile_options: <link xref="GLib.RegexCompileFlags">GLib.RegexCompileFlags</link>, match_options: <link xref="GLib.RegexMatchFlags">GLib.RegexMatchFlags</link>): Array(String) {
    // Gjs wrapper for g_regex_split_simple()
}
  </code></synopsis>
  <p>Breaks the string on the pattern, and returns an array of
the tokens. If the pattern contains capturing parentheses,
then the text for each of the substrings will also be returned.
If the pattern does not match anywhere in the string, then the
whole string is returned as the first token.</p>  <p>This function is equivalent to <link xref="GLib.Regex.split"/> but it does
not require to compile the pattern with <link xref="GLib.new"/>, avoiding
some lines of code when you need just to do a split without
extracting substrings, capture counts, and so on.</p>  <p>If this function is to be called on the same <code>pattern</code> more than
once, it's more efficient to compile the pattern once with
<link xref="GLib.new"/> and then use <link xref="GLib.Regex.split"/>.</p>  <p>As a special case, the result of splitting the empty string ""
is an empty vector, not a vector containing a single string.
The reason for this special case is that being able to represent
a empty vector is typically more useful than consistent handling
of empty elements. If you do need to represent empty elements,
you'll need to check for the empty string before calling this
function.</p>  <p>A pattern that can match empty strings splits <code>string</code> into
separate characters wherever it matches the empty string between
characters. For example splitting "ab c" using as a separator
"\s*", you will get "a", "b" and "c".</p>
  <p>Since 2.14</p>
<terms>
<item>
<title><code>pattern</code></title>
  <p>the regular expression</p>
</item>
<item>
<title><code>string</code></title>
  <p>the string to scan for matches</p>
</item>
<item>
<title><code>compile_options</code></title>
  <p>compile options for the regular expression, or 0</p>
</item>
<item>
<title><code>match_options</code></title>
  <p>match options, or 0</p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
