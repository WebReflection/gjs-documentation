<?xml version="1.0"?>
<page id="GLib.HashTable.replace"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.HashTable" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_hash_table_replace</api:name>
      <api:arg>
        <api:type>{gpointer: gpointer}</api:type>
        <api:name>hash_table</api:name>
      </api:arg>
      <api:arg>
        <api:type>gpointer</api:type>
        <api:name>key</api:name>
      </api:arg>
      <api:arg>
        <api:type>gpointer</api:type>
        <api:name>value</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.HashTable.replace</title>
  <synopsis><code mime="text/x-gjs">
function replace(hash_table: {gpointer: gpointer}, key: gpointer, value: gpointer): Boolean {
    // Gjs wrapper for g_hash_table_replace()
}
  </code></synopsis>
  <p>Inserts a new key and value into a <link xref="GLib.HashTable"/> similar to
<link xref="GLib.hash_table_insert"/>. The difference is that if the key
already exists in the <link xref="GLib.HashTable"/>, it gets replaced by the
new key. If you supplied a @value_destroy_func when creating
the <link xref="GLib.HashTable"/>, the old value is freed using that function.
If you supplied a @key_destroy_func when creating the
<link xref="GLib.HashTable"/>, the old key is freed using that function.</p>

<terms>
<item>
<title><code>hash_table</code></title>
  <p>a <link xref="GLib.HashTable"/></p>
</item>
<item>
<title><code>key</code></title>
  <p>a key to insert</p>
</item>
<item>
<title><code>value</code></title>
  <p>the value to associate with the key</p>
</item>
<item>
<title><code>ok</code></title>

</item>
</terms>

</page>
