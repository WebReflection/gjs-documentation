<?xml version="1.0"?>
<page id="GLib.MarkupParseContext.push"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.MarkupParseContext" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_markup_parse_context_push</api:name>
      <api:arg>
        <api:type>GLib.MarkupParser</api:type>
        <api:name>parser</api:name>
      </api:arg>
      <api:arg>
        <api:type>void</api:type>
        <api:name>user_data</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.MarkupParseContext.prototype.push</title>
  <synopsis><code mime="text/x-gjs">
function push(parser: <link xref="GLib.MarkupParser">GLib.MarkupParser</link>, user_data: void): void {
    // Gjs wrapper for g_markup_parse_context_push()
}
  </code></synopsis>
  <p>Temporarily redirects markup data to a sub-parser.</p>  <p>This function may only be called from the start_element handler of
a <link xref="GLib.MarkupParser"/>. It must be matched with a corresponding call to
<link xref="GLib.MarkupParseContext.pop"/> in the matching end_element handler
(except in the case that the parser aborts due to an error).</p>  <p>All tags, text and other data between the matching tags is
redirected to the subparser given by <code>parser</code>. <code>user_data</code> is used
as the user_data for that parser. <code>user_data</code> is also passed to the
error callback in the event that an error occurs. This includes
errors that occur in subparsers of the subparser.</p>  <p>The end tag matching the start tag for which this call was made is
handled by the previous parser (which is given its own user_data)
which is why <link xref="GLib.MarkupParseContext.pop"/> is provided to allow "one
last access" to the <code>user_data</code> provided to this function. In the
case of error, the <code>user_data</code> provided here is passed directly to
the error callback of the subparser and <link xref="GLib.MarkupParseContext.pop"/>
should not be called. In either case, if <code>user_data</code> was allocated
then it ought to be freed from both of these locations.</p>  <p>This function is not intended to be directly called by users
interested in invoking subparsers. Instead, it is intended to be
used by the subparsers themselves to implement a higher-level
interface.</p>  <p>As an example, see the following implementation of a simple
parser that counts the number of tags encountered.</p>  <p>|[&lt;!-- language="C" --&gt;
typedef struct
{
  gint tag_count;
} CounterData;</p>  <p>static void
counter_start_element (GMarkupParseContext  *context,
                       const gchar          *element_name,
                       const gchar         **attribute_names,
                       const gchar         **attribute_values,
                       gpointer              user_data,
                       GError              **error)
{
  CounterData *data = user_data;</p>  <p>  data-&gt;tag_count++;
}</p>  <p>static void
counter_error (GMarkupParseContext *context,
               GError              *error,
               gpointer             user_data)
{
  CounterData *data = user_data;</p>  <p>  g_slice_free (CounterData, data);
}</p>  <p>static GMarkupParser counter_subparser =
{
  counter_start_element,
  NULL,
  NULL,
  NULL,
  counter_error
};
]|</p>  <p>In order to allow this parser to be easily used as a subparser, the
following interface is provided:</p>  <p>|[&lt;!-- language="C" --&gt;
void
start_counting (GMarkupParseContext *context)
{
  CounterData *data = g_slice_new (CounterData);</p>  <p>  data-&gt;tag_count = 0;
  g_markup_parse_context_push (context, &amp;counter_subparser, data);
}</p>  <p>gint
end_counting (GMarkupParseContext *context)
{
  CounterData *data = g_markup_parse_context_pop (context);
  int result;</p>  <p>  result = data-&gt;tag_count;
  g_slice_free (CounterData, data);</p>  <p>  return result;
}
]|</p>  <p>The subparser would then be used as follows:</p>  <p>|[&lt;!-- language="C" --&gt;
static void start_element (context, element_name, ...)
{
  if (strcmp (element_name, "count-these") == 0)
    start_counting (context);</p>  <p>  // else, handle other tags...
}</p>  <p>static void end_element (context, element_name, ...)
{
  if (strcmp (element_name, "count-these") == 0)
    g_print ("Counted %d tags\n", end_counting (context));</p>  <p>  // else, handle other tags...
}
]|</p>
  <p>Since 2.18</p>
<terms>
<item>
<title><code>parser</code></title>
  <p>a <link xref="GLib.MarkupParser"/></p>
</item>
<item>
<title><code>user_data</code></title>
  <p>user data to pass to <link xref="GLib.MarkupParser"/> functions</p>
</item>
</terms>

</page>
