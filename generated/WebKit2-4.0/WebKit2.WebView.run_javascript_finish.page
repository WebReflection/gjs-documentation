<?xml version="1.0"?>
<page id="WebKit2.WebView.run_javascript_finish"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="WebKit2.WebView" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>WebKit2.JavascriptResult</api:type>
      </api:returns>
      <api:name>webkit_web_view_run_javascript_finish</api:name>
      <api:arg>
        <api:type>Gio.AsyncResult</api:type>
        <api:name>result</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>WebKit2.WebView.prototype.run_javascript_finish</title>
  <synopsis><code mime="text/x-gjs">
function run_javascript_finish(result: <link href="../Gio-2.0/Gio.AsyncResult.html">Gio.AsyncResult</link>): <link xref="WebKit2.JavascriptResult">WebKit2.JavascriptResult</link> {
    // Gjs wrapper for webkit_web_view_run_javascript_finish()
}
  </code></synopsis>
  <p>Finish an asynchronous operation started with <link xref="WebKit2.WebView.run_javascript"/>.</p>  <p>This is an example of using <link xref="WebKit2.WebView.run_javascript"/> with a script returning
a string:</p>  <p>&lt;informalexample&gt;&lt;programlisting&gt;
static void
web_view_javascript_finished (GObject      *object,
                              GAsyncResult *result,
                              gpointer      user_data)
{
    WebKitJavascriptResult *js_result;
    JSValueRef              value;
    JSGlobalContextRef      context;
    GError                 *error = NULL;</p>  <p>    js_result = webkit_web_view_run_javascript_finish (WEBKIT_WEB_VIEW (object), result, &amp;error);
    if (!js_result) {
        g_warning ("Error running javascript: %s", error-&gt;message);
        g_error_free (error);
        return;
    }</p>  <p>    context = webkit_javascript_result_get_global_context (js_result);
    value = webkit_javascript_result_get_value (js_result);
    if (JSValueIsString (context, value)) {
        JSStringRef js_str_value;
        gchar      *str_value;
        gsize       str_length;</p>  <p>        js_str_value = JSValueToStringCopy (context, value, NULL);
        str_length = JSStringGetMaximumUTF8CStringSize (js_str_value);
        str_value = (gchar *)g_malloc (str_length);
        JSStringGetUTF8CString (js_str_value, str_value, str_length);
        JSStringRelease (js_str_value);
        g_print ("Script result: %s\n", str_value);
        g_free (str_value);
    } else {
        g_warning ("Error running javascript: unexpected return value");
    }
    webkit_javascript_result_unref (js_result);
}</p>  <p>static void
web_view_get_link_url (WebKitWebView *web_view,
                       const gchar   *link_id)
{
    gchar *script;</p>  <p>    script = g_strdup_printf ("window.document.getElementById('%s').href;", link_id);
    webkit_web_view_run_javascript (web_view, script, NULL, web_view_javascript_finished, NULL);
    g_free (script);
}
&lt;/programlisting&gt;&lt;/informalexample&gt;</p>

<terms>
<item>
<title><code>result</code></title>
  <p>a <link href="../Gio-2.0/Gio.AsyncResult.html">Gio.AsyncResult</link></p>
</item>
<item>
<title><code>Returns</code></title>
  <p>a <link xref="WebKit2.JavascriptResult"/> with the result of the last executed statement in @script
   or <code>null</code> in case of error</p>
</item>
</terms>

</page>
