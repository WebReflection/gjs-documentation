<?xml version="1.0"?>
<page id="Secret.Schema.new"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Secret.Schema" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Secret.Schema</api:type>
      </api:returns>
      <api:name>secret_schema_newv</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>name</api:name>
      </api:arg>
      <api:arg>
        <api:type>Secret.SchemaFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>{String: Secret.SchemaAttributeType}</api:type>
        <api:name>attribute_names_and_types</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Secret.Schema.new</title>
  <synopsis><code mime="text/x-gjs">
function new(name: String, flags: <link xref="Secret.SchemaFlags">Secret.SchemaFlags</link>, attribute_names_and_types: {String: <link xref="Secret.SchemaAttributeType">Secret.SchemaAttributeType</link>}): <link xref="Secret.Schema">Secret.Schema</link> {
    // Gjs wrapper for secret_schema_newv()
}
  </code></synopsis>
  <p>Using this function is not normally necessary from C code. This is useful
for constructing <link xref="Secret.Schema"/> structures in bindings.</p>  <p>A schema represents a set of attributes that are stored with an item. These
schemas are used for interoperability between various services storing the
same types of items.</p>  <p>Each schema has an <code>name</code> like "org.gnome.keyring.NetworkPassword", and
defines a set of attributes names, and types (string, integer, boolean) for
those attributes.</p>  <p>Each key in the @attributes table should be a attribute name strings, and
the values in the table should be integers from the <link xref="Secret.SchemaAttributeType"/>
enumeration, representing the attribute type for each attribute name.</p>  <p>Normally when looking up passwords only those with matching schema names are
returned. If the schema <code>flags</code> contain the <link xref="Secret.SchemaFlags"/>.dont_match_name flag,
then lookups will not check that the schema name matches that on the item, only
the schema's attributes are matched. This is useful when you are looking up items
that are not stored by the libsecret library. Other libraries such as libgnome-keyring
don't store the schema name.</p>

<terms>
<item>
<title><code>name</code></title>
  <p>the dotted name of the schema</p>
</item>
<item>
<title><code>flags</code></title>
  <p>the flags for the schema</p>
</item>
<item>
<title><code>attribute_names_and_types</code></title>
  <p>the attribute names and types of those attributes</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>the new schema, which should be unreferenced with
         <link xref="Secret.Schema.unref"/> when done</p>
</item>
</terms>

</page>
