<?xml version="1.0"?>
<page id="Secret.Collection.create"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Secret.Collection" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>secret_collection_create</api:name>
      <api:arg>
        <api:type>Secret.Service</api:type>
        <api:name>service</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>label</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>alias</api:name>
      </api:arg>
      <api:arg>
        <api:type>Secret.CollectionCreateFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.AsyncReadyCallback</api:type>
        <api:name>callback</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Secret.Collection.create</title>
  <synopsis><code mime="text/x-gjs">
function create(service: <link xref="Secret.Service">Secret.Service</link>, label: String, alias: String, flags: <link xref="Secret.CollectionCreateFlags">Secret.CollectionCreateFlags</link>, cancellable: <link href="../Gio-2.0/Gio.Cancellable.html">Gio.Cancellable</link>, callback: <link href="../Gio-2.0/Gio.AsyncReadyCallback.html">Gio.AsyncReadyCallback</link>): void {
    // Gjs wrapper for secret_collection_create()
}
  </code></synopsis>
  <p>Create a new collection in the secret service.</p>  <p>This method returns immediately and completes asynchronously. The secret
service may prompt the user. <link xref="Secret.Service.prompt"/> will be used to handle
any prompts that are required.</p>  <p>An <code>alias</code> is a well-known tag for a collection, such as 'default' (ie: the
default collection to store items in). This allows other applications to
easily identify and share a collection. If you specify an <code>alias</code>, and a
collection with that alias already exists, then a new collection will not
be created. The previous one will be returned instead.</p>  <p>If <code>service</code> is NULL, then <link xref="Secret.Service.get"/> will be called to get
the default <link xref="Secret.Service"/> proxy.</p>

<terms>
<item>
<title><code>service</code></title>
  <p>a secret service object</p>
</item>
<item>
<title><code>label</code></title>
  <p>label for the new collection</p>
</item>
<item>
<title><code>alias</code></title>
  <p>alias to assign to the collection</p>
</item>
<item>
<title><code>flags</code></title>
  <p>currently unused</p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>optional cancellation object</p>
</item>
<item>
<title><code>callback</code></title>
  <p>called when the operation completes</p>
</item>
</terms>

</page>
