<?xml version="1.0"?>
<page id="Cogl.Texture2D.new_with_size"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Cogl.Texture2D" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Cogl.Texture2D</api:type>
      </api:returns>
      <api:name>cogl_texture_2d_new_with_size</api:name>
      <api:arg>
        <api:type>Cogl.Context</api:type>
        <api:name>ctx</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>width</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>height</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Cogl.Texture2D.new_with_size</title>
  <synopsis><code mime="text/x-gjs">
function new_with_size(ctx: <link xref="Cogl.Context">Cogl.Context</link>, width: Number(gint), height: Number(gint)): <link xref="Cogl.Texture2D">Cogl.Texture2D</link> {
    // Gjs wrapper for cogl_texture_2d_new_with_size()
}
  </code></synopsis>
  <p>Creates a low-level <link xref="Cogl.Texture2D"/> texture with a given <code>width</code> and
<code>height</code> that your GPU can texture from directly.</p>  <p>The storage for the texture is not allocated before this function
returns. You can call <link xref="Cogl.Texture.allocate"/> to explicitly
allocate the underlying storage or preferably let Cogl
automatically allocate storage lazily when it may know more about
how the texture is being used and can optimize how it is allocated.</p>  <p>The texture is still configurable until it has been allocated so
for example you can influence the internal format of the texture
using <link xref="Cogl.Texture.set_components"/> and
<link xref="Cogl.Texture.set_premultiplied"/>.</p>  <p>&lt;note&gt;Many GPUs only support power of two sizes for <link xref="Cogl.Texture2D"/>
textures. You can check support for non power of two textures by
checking for the <link xref="Cogl.FeatureID"/>.ogl_feature_id_texture_npot feature via
<link xref="Cogl.has_feature"/>.&lt;/note&gt;</p>
  <p>Since 2.0</p>
<terms>
<item>
<title><code>ctx</code></title>
  <p>A <link xref="Cogl.Context"/></p>
</item>
<item>
<title><code>width</code></title>
  <p>Width of the texture to allocate</p>
</item>
<item>
<title><code>height</code></title>
  <p>Height of the texture to allocate</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>A new <link xref="Cogl.Texture2D"/> object with no storage yet allocated.</p>
</item>
</terms>

</page>
