<?xml version="1.0"?>
<page id="Cogl.Renderer.new"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Cogl.Renderer" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Cogl.Renderer</api:type>
      </api:returns>
      <api:name>cogl_renderer_new</api:name>
    </api:function>
  </info>
  <title>Cogl.Renderer.new</title>
  <synopsis><code mime="text/x-gjs">
function new(): <link xref="Cogl.Renderer">Cogl.Renderer</link> {
    // Gjs wrapper for cogl_renderer_new()
}
  </code></synopsis>
  <p>Instantiates a new (unconnected) <link xref="Cogl.Renderer"/> object. A
<link xref="Cogl.Renderer"/> represents a means to render. It encapsulates the
selection of an underlying driver, such as OpenGL or OpenGL-ES and
a selection of a window system binding API such as GLX, or EGL or
WGL.</p>  <p>While the renderer is unconnected it can be configured so that
applications may specify backend constraints, such as "must use
x11" for example via <link xref="Cogl.Renderer.add_constraint"/>.</p>  <p>There are also some platform specific configuration apis such
as cogl_xlib_renderer_set_foreign_display() that may also be
used while the renderer is unconnected.</p>  <p>Once the renderer has been configured, then it may (optionally) be
explicitly connected using <link xref="Cogl.Renderer.connect"/> which allows
errors to be handled gracefully and potentially fallback
configurations can be tried out if there are initial failures.</p>  <p>If a renderer is not explicitly connected then <link xref="Cogl.Display.new"/>
will automatically connect the renderer for you. If you don't
have any code to deal with error/fallback situations then its fine
to just let Cogl do the connection for you.</p>  <p>Once you have setup your renderer then the next step is to create a
<link xref="Cogl.Display"/> using <link xref="Cogl.Display.new"/>.</p>  <p>&lt;note&gt;Many applications don't need to explicitly use
<link xref="Cogl.Renderer.new"/> or <link xref="Cogl.Display.new"/> and can just jump
straight to <link xref="Cogl.Context.new"/> and pass a <code>null</code> display argument
so Cogl will automatically connect and setup a renderer and
display.&lt;/note&gt;</p>
  <p>Since 1.10</p>
<terms>
<item>
<title><code>Returns</code></title>
  <p>A newly created <link xref="Cogl.Renderer"/>.</p>
</item>
</terms>

</page>
