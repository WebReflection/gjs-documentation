<?xml version="1.0"?>
<page id="Cogl.MatrixStack"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Cogl.MatrixStack</title>
  <synopsis><code>
const Cogl = imports.gi.Cogl;

let matrixStack = new Cogl.MatrixStack();
  </code></synopsis>
  <p>Tracks your current position within a hierarchy and lets you build
up a graph of transformations as you traverse through a hierarchy
such as a scenegraph.</p>  <p>A <link xref="Cogl.MatrixStack"/> always maintains a reference to a single
transformation at any point in time, representing the
transformation at the current position in the hierarchy. You can
get a reference to the current transformation by calling
<link xref="Cogl.MatrixStack.get_entry"/>.</p>  <p>When a <link xref="Cogl.MatrixStack"/> is first created with
<link xref="Cogl.MatrixStack.new"/> then it is conceptually positioned at the
root of your hierarchy and the current transformation simply
represents an identity transformation.</p>  <p>As you traverse your object hierarchy (your scenegraph) then you
should call <link xref="Cogl.MatrixStack.push"/> whenever you move down one
level and call <link xref="Cogl.MatrixStack.pop"/> whenever you move back up
one level towards the root.</p>  <p>At any time you can apply a set of operations, such as "rotate",
"scale", "translate" on top of the current transformation of a
<link xref="Cogl.MatrixStack"/> using functions such as
<link xref="Cogl.MatrixStack.rotate"/>, <link xref="Cogl.MatrixStack.scale"/> and
<link xref="Cogl.MatrixStack.translate"/>. These operations will derive a new
current transformation and will never affect a transformation
that you have referenced using <link xref="Cogl.MatrixStack.get_entry"/>.</p>  <p>Internally applying operations to a <link xref="Cogl.MatrixStack"/> builds up a
graph of <link xref="Cogl.MatrixEntry"/> structures which each represent a single
immutable transform.</p>

  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>Cogl.Object</code>
      <item>
        <code>Cogl.MatrixStack</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
