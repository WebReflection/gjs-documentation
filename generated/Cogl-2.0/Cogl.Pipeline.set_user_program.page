<?xml version="1.0"?>
<page id="Cogl.Pipeline.set_user_program"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Cogl.Pipeline" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>cogl_pipeline_set_user_program</api:name>
      <api:arg>
        <api:type>Cogl.Handle</api:type>
        <api:name>program</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Cogl.Pipeline.prototype.set_user_program</title>
  <synopsis><code mime="text/x-gjs">
function set_user_program(program: <link xref="Cogl.Handle">Cogl.Handle</link>): void {
    // Gjs wrapper for cogl_pipeline_set_user_program()
}
  </code></synopsis>
  <p>Associates a linked CoglProgram with the given pipeline so that the
program can take full control of vertex and/or fragment processing.</p>  <p>This is an example of how it can be used to associate an ARBfp
program with a <link xref="Cogl.Pipeline"/>:
|[
CoglHandle shader;
CoglHandle program;
CoglPipeline *pipeline;</p>  <p>shader = cogl_create_shader (COGL_SHADER_TYPE_FRAGMENT);
cogl_shader_source (shader,
                    "!!ARBfp1.0\n"
                    "MOV result.color,fragment.color;\n"
                    "END\n");
cogl_shader_compile (shader);</p>  <p>program = cogl_create_program ();
cogl_program_attach_shader (program, shader);
cogl_program_link (program);</p>  <p>pipeline = cogl_pipeline_new ();
cogl_pipeline_set_user_program (pipeline, program);</p>  <p>cogl_set_source_color4ub (0xff, 0x00, 0x00, 0xff);
cogl_rectangle (0, 0, 100, 100);
]|</p>  <p>It is possibly worth keeping in mind that this API is not part of
the long term design for how we want to expose shaders to Cogl
developers (We are planning on deprecating the cogl_program and
cogl_shader APIs in favour of a "snippet" framework) but in the
meantime we hope this will handle most practical GLSL and ARBfp
requirements.</p>  <p>Also remember you need to check for either the
<link xref="Cogl.FeatureFlags"/>.shaders_glsl or <link xref="Cogl.FeatureFlags"/>.shaders_arbfp before
using the cogl_program or cogl_shader API.</p>
  <p>Since 2.0</p>
<terms>
<item>
<title><code>program</code></title>
  <p>A <link xref="Cogl.Handle"/> to a linked CoglProgram</p>
</item>
</terms>

</page>
