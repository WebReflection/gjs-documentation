<?xml version="1.0"?>
<page id="Cogl.Texture3D.new_with_size"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Cogl.Texture3D" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Cogl.Texture3D</api:type>
      </api:returns>
      <api:name>cogl_texture_3d_new_with_size</api:name>
      <api:arg>
        <api:type>Cogl.Context</api:type>
        <api:name>context</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>width</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>height</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>depth</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Cogl.Texture3D.new_with_size</title>
  <synopsis><code mime="text/x-gjs">
function new_with_size(context: <link xref="Cogl.Context">Cogl.Context</link>, width: Number(gint), height: Number(gint), depth: Number(gint)): <link xref="Cogl.Texture3D">Cogl.Texture3D</link> {
    // Gjs wrapper for cogl_texture_3d_new_with_size()
}
  </code></synopsis>
  <p>Creates a low-level <link xref="Cogl.Texture3D"/> texture with the specified
dimensions and pixel format.</p>  <p>The storage for the texture is not allocated before this function
returns. You can call <link xref="Cogl.Texture.allocate"/> to explicitly
allocate the underlying storage or preferably let Cogl
automatically allocate storage lazily when it may know more about
how the texture is going to be used and can optimize how it is
allocated.</p>  <p>The texture is still configurable until it has been allocated so
for example you can influence the internal format of the texture
using <link xref="Cogl.Texture.set_components"/> and
<link xref="Cogl.Texture.set_premultiplied"/>.</p>  <p>&lt;note&gt;This texture will fail to allocate later if
<link xref="Cogl.FeatureID"/>.ogl_feature_id_texture_3d is not advertised. Allocation can also
fail if the requested dimensions are not supported by the
GPU.&lt;/note&gt;</p>
  <p>Since 1.10</p>
<terms>
<item>
<title><code>context</code></title>
  <p>a <link xref="Cogl.Context"/></p>
</item>
<item>
<title><code>width</code></title>
  <p>width of the texture in pixels.</p>
</item>
<item>
<title><code>height</code></title>
  <p>height of the texture in pixels.</p>
</item>
<item>
<title><code>depth</code></title>
  <p>depth of the texture in pixels.</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>A new <link xref="Cogl.Texture3D"/> object with no storage yet allocated.</p>
</item>
</terms>

</page>
