<?xml version="1.0"?>
<page id="Cogl.Texture2DSliced.new_from_data"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Cogl.Texture2DSliced" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Cogl.Texture2DSliced</api:type>
      </api:returns>
      <api:name>cogl_texture_2d_sliced_new_from_data</api:name>
      <api:arg>
        <api:type>Cogl.Context</api:type>
        <api:name>ctx</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>width</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>height</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>max_waste</api:name>
      </api:arg>
      <api:arg>
        <api:type>Cogl.PixelFormat</api:type>
        <api:name>format</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>rowstride</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(guint8)</api:type>
        <api:name>data</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Cogl.Texture2DSliced.new_from_data</title>
  <synopsis><code mime="text/x-gjs">
function new_from_data(ctx: <link xref="Cogl.Context">Cogl.Context</link>, width: Number(gint), height: Number(gint), max_waste: Number(gint), format: <link xref="Cogl.PixelFormat">Cogl.PixelFormat</link>, rowstride: Number(gint), data: Number(guint8)): <link xref="Cogl.Texture2DSliced">Cogl.Texture2DSliced</link> {
    // Gjs wrapper for cogl_texture_2d_sliced_new_from_data()
}
  </code></synopsis>
  <p>Creates a new <link xref="Cogl.Texture2DSliced"/> texture based on data residing
in memory.</p>  <p>A <link xref="Cogl.Texture2DSliced"/> may internally be comprised of 1 or more
<link xref="Cogl.Texture2D"/> textures depending on GPU limitations.  For example
if the GPU only supports power-of-two sized textures then a sliced
texture will turn a non-power-of-two size into a combination of
smaller power-of-two sized textures. If the requested texture size
is larger than is supported by the hardware then the texture will
be sliced into smaller textures that can be accessed by the
hardware.</p>  <p><code>max_waste</code> is used as a threshold for recursively slicing the
right-most or bottom-most slices into smaller sizes until the
wasted padding at the bottom and right of the textures is less than
specified. A negative <code>max_waste</code> will disable slicing.</p>  <p>&lt;note&gt;This api will always immediately allocate GPU memory for all
the required texture slices and upload the given data so that the
<code>data</code> pointer does not need to remain valid once this function
returns. This means it is not possible to configure the texture
before it is allocated. If you do need to configure the texture
before allocation (to specify constraints on the internal format
for example) then you can instead create a <link xref="Cogl.Bitmap"/> for your
data and use <link xref="Cogl.Texture2DSliced.new_from_bitmap"/> or use
<link xref="Cogl.Texture2DSliced.new_with_size"/> and then upload data using
<link xref="Cogl.Texture.set_data"/>&lt;/note&gt;</p>  <p>&lt;note&gt;It's possible for the allocation of a sliced texture to fail
due to impossible slicing constraints if a negative <code>max_waste</code>
value is given. If the given virtual texture size is larger than is
supported by the hardware but slicing is disabled the texture size
would be too large to handle.&lt;/note&gt;</p>
  <p>Since 1.16</p>
<terms>
<item>
<title><code>ctx</code></title>
  <p>A <link xref="Cogl.Context"/></p>
</item>
<item>
<title><code>width</code></title>
  <p>width of texture in pixels</p>
</item>
<item>
<title><code>height</code></title>
  <p>height of texture in pixels</p>
</item>
<item>
<title><code>max_waste</code></title>
  <p>The threshold of how wide a strip of wasted texels
            are allowed along the right and bottom textures before
            they must be sliced to reduce the amount of waste. A
            negative can be passed to disable slicing.</p>
</item>
<item>
<title><code>format</code></title>
  <p>the <link xref="Cogl.PixelFormat"/> the buffer is stored in in RAM</p>
</item>
<item>
<title><code>rowstride</code></title>
  <p>the memory offset in bytes between the start of each
   row in <code>data</code>. A value of 0 will make Cogl automatically
   calculate <code>rowstride</code> from <code>width</code> and <code>format</code>.</p>
</item>
<item>
<title><code>data</code></title>
  <p>pointer the memory region where the source buffer resides</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>A newly created <link xref="Cogl.Texture2DSliced"/>
              or <code>null</code> on failure and @error will be updated.</p>
</item>
</terms>

</page>
