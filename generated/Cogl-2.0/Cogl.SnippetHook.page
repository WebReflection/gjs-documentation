<?xml version="1.0"?>
<page id="Cogl.SnippetHook"
      type="guide"
      style="enum"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="enum" type="guide"/>
  </info>
  <title>Cogl.SnippetHook</title>
  <p><link xref="Cogl.SnippetHook"/> is used to specify a location within a
<link xref="Cogl.Pipeline"/> where the code of the snippet should be used when it
is attached to a pipeline.</p>  <p>&lt;glosslist&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.vertex_globals&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet at the beginning of the global section of the
shader for the vertex processing. Any declarations here can be
shared with all other snippets that are attached to a vertex hook.
Only the ‘declarations’ string is used and the other strings are
ignored.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.fragment_globals&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet at the beginning of the global section of the
shader for the fragment processing. Any declarations here can be
shared with all other snippets that are attached to a fragment
hook. Only the ‘declarations’ string is used and the other strings
are ignored.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.vertex&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the vertex processing
stage of the pipeline. This gives a chance for the application to
modify the vertex attributes generated by the shader. Typically the
snippet will modify cogl_color_out or cogl_position_out builtins.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted at the top of the
main() function before any vertex processing is done.
&lt;/para&gt;
&lt;para&gt;
The ‘replace’ string in @snippet will be used instead of the
generated vertex processing if it is present. This can be used if
the application wants to provide a complete vertex shader and
doesn't need the generated output from Cogl.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted after all of the
standard vertex processing is done. This can be used to modify the
outputs.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.vertex_transform&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the vertex transform stage.
Typically the snippet will use the cogl_modelview_matrix,
cogl_projection_matrix and cogl_modelview_projection_matrix matrices and the
cogl_position_in attribute. The hook must write to cogl_position_out.
The default processing for this hook will multiply cogl_position_in by
the combined modelview-projection matrix and store it on cogl_position_out.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted at the top of the
main() function before the vertex transform is done.
&lt;/para&gt;
&lt;para&gt;
The ‘replace’ string in @snippet will be used instead of the
generated vertex transform if it is present.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted after all of the
standard vertex transformation is done. This can be used to modify the
cogl_position_out in addition to the default processing.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.point_size&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the point size
calculation step within the vertex shader stage. The snippet should
write to the builtin cogl_point_size_out with the new point size.
The snippet can either read cogl_point_size_in directly and write a
new value or first read an existing value in cogl_point_size_out
that would be set by a previous snippet. Note that this hook is
only used if <link xref="Cogl.Pipeline.set_per_vertex_point_size"/> is enabled
on the pipeline.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted just before
calculating the point size.
&lt;/para&gt;
&lt;para&gt;
The ‘replace’ string in @snippet will be used instead of the
generated point size calculation if it is present.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted after the
standard point size calculation is done. This can be used to modify
cogl_point_size_out in addition to the default processing.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.fragment&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the fragment processing
stage of the pipeline. This gives a chance for the application to
modify the fragment color generated by the shader. Typically the
snippet will modify cogl_color_out.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted at the top of the
main() function before any fragment processing is done.
&lt;/para&gt;
&lt;para&gt;
The ‘replace’ string in @snippet will be used instead of the
generated fragment processing if it is present. This can be used if
the application wants to provide a complete fragment shader and
doesn't need the generated output from Cogl.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted after all of the
standard fragment processing is done. At this point the generated
value for the rest of the pipeline state will already be in
cogl_color_out so the application can modify the result by altering
this variable.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.texture_coord_transform&lt;/glossterm&gt;
   &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the texture coordinate
transformation of a particular layer. This can be used to replace
the processing for a layer or to modify the results.
&lt;/para&gt;
&lt;para&gt;
Within the snippet code for this hook there are two extra
variables. The first is a mat4 called cogl_matrix which represents
the user matrix for this layer. The second is called cogl_tex_coord
and represents the incoming and outgoing texture coordinate. On
entry to the hook, cogl_tex_coord contains the value of the
corresponding texture coordinate attribute for this layer. The hook
is expected to modify this variable. The output will be passed as a
varying to the fragment processing stage. The default code will
just multiply cogl_matrix by cogl_tex_coord and store the result in
cogl_tex_coord.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted just before the
fragment processing for this layer. At this point cogl_tex_coord
still contains the value of the texture coordinate attribute.
&lt;/para&gt;
&lt;para&gt;
If a ‘replace’ string is given then this will be used instead of
the default fragment processing for this layer. The snippet can
modify cogl_tex_coord or leave it as is to apply no transformation.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted just after the
transformation. At this point cogl_tex_coord will contain the
results of the transformation but it can be further modified by the
snippet.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.layer_fragment&lt;/glossterm&gt;
   &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the fragment processing
of a particular layer. This can be used to replace the processing
for a layer or to modify the results.
&lt;/para&gt;
&lt;para&gt;
Within the snippet code for this hook there is an extra vec4
variable called ‘cogl_layer’. This contains the resulting color
that will be used for the layer. This can be modified in the ‘post’
section or it the default processing can be replaced entirely using
the ‘replace’ section.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted just before the
fragment processing for this layer.
&lt;/para&gt;
&lt;para&gt;
If a ‘replace’ string is given then this will be used instead of
the default fragment processing for this layer. The snippet must write to
the ‘cogl_layer’ variable in that case.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted just after the
fragment processing for the layer. The results can be modified by changing
the value of the ‘cogl_layer’ variable.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
 &lt;glossentry&gt;
  &lt;glossterm&gt;<link xref="Cogl.SnippetHook"/>.texture_lookup&lt;/glossterm&gt;
  &lt;glossdef&gt;
&lt;para&gt;
Adds a shader snippet that will hook on to the texture lookup part
of a given layer. This gives a chance for the application to modify
the coordinates that will be used for the texture lookup or to
alter the returned texel.
&lt;/para&gt;
&lt;para&gt;
Within the snippet code for this hook there are three extra
variables available. ‘cogl_sampler’ is a sampler object
representing the sampler for the layer where the snippet is
attached. ‘cogl_tex_coord’ is a vec4 which contains the texture
coordinates that will be used for the texture lookup. This can be
modified. ‘cogl_texel’ will contain the result of the texture
lookup. This can also be modified.
&lt;/para&gt;
&lt;para&gt;
The ‘declarations’ string in @snippet will be inserted in the
global scope of the shader. Use this to declare any uniforms,
attributes or functions that the snippet requires.
&lt;/para&gt;
&lt;para&gt;
The ‘pre’ string in @snippet will be inserted at the top of the
main() function before any fragment processing is done. This is a
good place to modify the cogl_tex_coord variable.
&lt;/para&gt;
&lt;para&gt;
If a ‘replace’ string is given then this will be used instead of a
the default texture lookup. The snippet would typically use its own
sampler in this case.
&lt;/para&gt;
&lt;para&gt;
The ‘post’ string in @snippet will be inserted after texture lookup
has been preformed. Here the snippet can modify the cogl_texel
variable to alter the returned texel.
&lt;/para&gt;
  &lt;/glossdef&gt;
 &lt;/glossentry&gt;
&lt;/glosslist&gt;</p>
  <p>Since 1.10</p>
<terms>
<item>
<title><code>SnippetHook.VERTEX</code></title>
  <p>A hook for the entire vertex processing
  stage of the pipeline.</p>
</item>
<item>
<title><code>SnippetHook.VERTEX_TRANSFORM</code></title>
  <p>A hook for the vertex transformation.</p>
</item>
<item>
<title><code>SnippetHook.VERTEX_GLOBALS</code></title>
  <p>A hook for declaring global data
  that can be shared with all other snippets that are on a vertex
  hook.</p>
</item>
<item>
<title><code>SnippetHook.POINT_SIZE</code></title>
  <p>A hook for manipulating the point
  size of a vertex. This is only used if
  <link xref="Cogl.Pipeline.set_per_vertex_point_size"/> is enabled on the
  pipeline.</p>
</item>
<item>
<title><code>SnippetHook.FRAGMENT</code></title>
  <p>A hook for the entire fragment
  processing stage of the pipeline.</p>
</item>
<item>
<title><code>SnippetHook.FRAGMENT_GLOBALS</code></title>
  <p>A hook for declaring global
  data wthat can be shared with all other snippets that are on a
  fragment hook.</p>
</item>
<item>
<title><code>SnippetHook.TEXTURE_COORD_TRANSFORM</code></title>
  <p>A hook for applying the
  layer matrix to a texture coordinate for a layer.</p>
</item>
<item>
<title><code>SnippetHook.LAYER_FRAGMENT</code></title>
  <p>A hook for the fragment
  processing of a particular layer.</p>
</item>
<item>
<title><code>SnippetHook.TEXTURE_LOOKUP</code></title>
  <p>A hook for the texture lookup
  stage of a given layer in a pipeline.</p>
</item>
</terms>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Functions</title>
  </links>
</page>
