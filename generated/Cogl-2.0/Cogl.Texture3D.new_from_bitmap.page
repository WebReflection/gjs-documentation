<?xml version="1.0"?>
<page id="Cogl.Texture3D.new_from_bitmap"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Cogl.Texture3D" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Cogl.Texture3D</api:type>
      </api:returns>
      <api:name>cogl_texture_3d_new_from_bitmap</api:name>
      <api:arg>
        <api:type>Cogl.Bitmap</api:type>
        <api:name>bitmap</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>height</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>depth</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Cogl.Texture3D.new_from_bitmap</title>
  <synopsis><code mime="text/x-gjs">
function new_from_bitmap(bitmap: <link xref="Cogl.Bitmap">Cogl.Bitmap</link>, height: Number(gint), depth: Number(gint)): <link xref="Cogl.Texture3D">Cogl.Texture3D</link> {
    // Gjs wrapper for cogl_texture_3d_new_from_bitmap()
}
  </code></synopsis>
  <p>Creates a low-level 3D texture and initializes it with the images
in <code>bitmap</code>. The images are assumed to be packed together after one
another in the increasing y axis. The height of individual image is
given as <code>height</code> and the number of images is given in <code>depth</code>. The
actual height of the bitmap can be larger than <code>height</code> Ã— <code>depth</code>. In
this case it assumes there is padding between the images.</p>  <p>The storage for the texture is not allocated before this function
returns. You can call <link xref="Cogl.Texture.allocate"/> to explicitly
allocate the underlying storage or preferably let Cogl
automatically allocate storage lazily when it may know more about
how the texture is going to be used and can optimize how it is
allocated.</p>  <p>The texture is still configurable until it has been allocated so
for example you can influence the internal format of the texture
using <link xref="Cogl.Texture.set_components"/> and
<link xref="Cogl.Texture.set_premultiplied"/>.</p>  <p>&lt;note&gt;This texture will fail to allocate later if
<link xref="Cogl.FeatureID"/>.ogl_feature_id_texture_3d is not advertised. Allocation can also
fail if the requested dimensions are not supported by the
GPU.&lt;/note&gt;</p>
  <p>Since 2.0</p>
<terms>
<item>
<title><code>bitmap</code></title>
  <p>A <link xref="Cogl.Bitmap"/> object.</p>
</item>
<item>
<title><code>height</code></title>
  <p>height of the texture in pixels.</p>
</item>
<item>
<title><code>depth</code></title>
  <p>depth of the texture in pixels.</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>a newly created <link xref="Cogl.Texture3D"/></p>
</item>
</terms>

</page>
