<?xml version="1.0"?>
<page id="GObject.TypePlugin"
      type="guide"
      style="interface"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="interface" type="guide"/>
  </info>
  <title>GObject.TypePlugin</title>
  <synopsis><code>
const GObject = imports.gi.GObject;

let type_plugin = new GObject.TypePlugin();
  </code></synopsis>
  <p>The GObject type system supports dynamic loading of types.
The <link xref="GObject.TypePlugin"/> interface is used to handle the lifecycle
of dynamically loaded types. It goes as follows:</p>  <p>1. The type is initially introduced (usually upon loading the module
   the first time, or by your main application that knows what modules
   introduces what types), like this:
   |[&lt;!-- language="C" --&gt;
   new_type_id = g_type_register_dynamic (parent_type_id,
                                          "TypeName",
                                          new_type_plugin,
                                          type_flags);
   ]|
   where @new_type_plugin is an implementation of the
   <link xref="GObject.TypePlugin"/> interface.</p>  <p>2. The type's implementation is referenced, e.g. through
   <link xref="GObject.type_class_ref"/> or through <link xref="GObject.type_create_instance"/> (this is
   being called by <link xref="GObject.Object.new"/>) or through one of the above done on
   a type derived from @new_type_id.</p>  <p>3. This causes the type system to load the type's implementation by
   calling <link xref="GObject.TypePlugin.use"/> and <link xref="GObject.TypePlugin.complete_type_info"/>
   on @new_type_plugin.</p>  <p>4. At some point the type's implementation isn't required anymore,
   e.g. after <link xref="GObject.TypeClass.unref"/> or <link xref="GObject.type_free_instance"/> (called
   when the reference count of an instance drops to zero).</p>  <p>5. This causes the type system to throw away the information retrieved
   from <link xref="GObject.TypePlugin.complete_type_info"/> and then it calls
   <link xref="GObject.TypePlugin.unuse"/> on @new_type_plugin.</p>  <p>6. Things may repeat from the second step.</p>  <p>So basically, you need to implement a <link xref="GObject.TypePlugin"/> type that
carries a use_count, once use_count goes from zero to one, you need
to load the implementation to successfully handle the upcoming
<link xref="GObject.TypePlugin.complete_type_info"/> call. Later, maybe after
succeeding use/unuse calls, once use_count drops to zero, you can
unload the implementation again. The type system makes sure to call
<link xref="GObject.TypePlugin.use"/> and <link xref="GObject.TypePlugin.complete_type_info"/> again
when the type is needed again.</p>  <p><link xref="GObject.TypeModule"/> is an implementation of <link xref="GObject.TypePlugin"/> that already
implements most of this except for the actual module loading and
unloading. It even handles multiple registered types per module.</p>

  <synopsis>
    <title>Prerequisites</title>
    <p>TypePlugin requires GObject.Object</p>
  </synopsis>
  <synopsis>
    <title>Known Implementations</title>
    <p>TypePlugin is implemented by TypeModule</p>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
