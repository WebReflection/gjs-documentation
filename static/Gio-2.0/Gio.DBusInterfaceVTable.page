<?xml version="1.0"?>
<page id="Gio.DBusInterfaceVTable"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Gio.DBusInterfaceVTable</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let dBusInterfaceVTable = new Gio.DBusInterfaceVTable();
  </code></synopsis>
  <p>Virtual table for handling properties and method calls for a D-Bus
interface.</p>  <p>Since 2.38, if you want to handle getting/setting D-Bus properties
asynchronously, give <code>null</code> as your get_property() or set_property()
function.  The D-Bus call will be directed to your @method_call
function, with the provided @interface_name set to
&lt;literal&gt;"org.freedesktop.DBus.Properties"&lt;/literal&gt;.</p>  <p>The usual checks on the validity of the calls is performed.  For
&lt;literal&gt;'Get'&lt;/literal&gt; calls, an error is automatically returned if
the property does not exist or the permissions do not allow access.
The same checks are performed for &lt;literal&gt;'Set'&lt;/literal&gt; calls, and
the provided value is also checked for being the correct type.</p>  <p>For both &lt;literal&gt;'Get'&lt;/literal&gt; and &lt;literal&gt;'Set'&lt;/literal&gt; calls,
the <link xref="Gio.DBusMethodInvocation"/> passed to the method_call handler can be
queried with <link xref="Gio.DBusMethodInvocation.get_property_info"/> to get a
pointer to the <link xref="Gio.DBusPropertyInfo"/> of the property.</p>  <p>If you have readable properties specified in your interface info, you
must ensure that you either provide a non-<code>null</code> @get_property()
function or provide implementations of both the
&lt;literal&gt;'Get'&lt;/literal&gt; and &lt;literal&gt;'GetAll'&lt;/literal&gt; methods on
the &lt;literal&gt;'org.freedesktop.DBus.Properties'&lt;/literal&gt; interface in
your @method_call function.  Note that the required return type of
the &lt;literal&gt;'Get'&lt;/literal&gt; call is &lt;literal&gt;(v)&lt;/literal&gt;, not the
type of the property.  &lt;literal&gt;'GetAll'&lt;/literal&gt; expects a return
value of type &lt;literal&gt;a{sv}&lt;/literal&gt;.</p>  <p>If you have writable properties specified in your interface info, you
must ensure that you either provide a non-<code>null</code> @set_property()
function or provide an implementation of the &lt;literal&gt;'Set'&lt;/literal&gt;
call.  If implementing the call, you must return the value of type
%G_VARIANT_TYPE_UNIT.</p>
  <p>Since 2.26</p>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
