<?xml version="1.0"?>
<page id="Gio.IOStream"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Gio.IOStream</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let iOStream = new Gio.IOStream({
});
  </code></synopsis>
  <p>GIOStream represents an object that has both read and write streams.
Generally the two streams acts as separate input and output streams,
but they share some common resources and state. For instance, for
seekable streams they may use the same position in both streams.</p>  <p>Examples of <link xref="Gio.IOStream"/> objects are <link xref="Gio.SocketConnection"/> which represents
a two-way network connection, and <link xref="Gio.FileIOStream"/> which represent a
file handle opened in read-write mode.</p>  <p>To do the actual reading and writing you need to get the substreams
with <link xref="Gio.IOStream.get_input_stream"/> and <link xref="Gio.IOStream.get_output_stream"/>.</p>  <p>The <link xref="Gio.IOStream"/> object owns the input and the output streams, not the other
way around, so keeping the substreams alive will not keep the <link xref="Gio.IOStream"/>
object alive. If the <link xref="Gio.IOStream"/> object is freed it will be closed, thus
closing the substream, so even if the substreams stay alive they will
always just return a <link xref="Gio.IOErrorEnum"/>.closed for all operations.</p>  <p>To close a stream use <link xref="Gio.IOStream.close"/> which will close the common
stream object and also the individual substreams. You can also close
the substreams themselves. In most cases this only marks the
substream as closed, so further I/O on it fails but common state in the
<link xref="Gio.IOStream"/> may still be open. However, some streams may support
"half-closed" states where one direction of the stream is actually shut down.</p>

  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>GObject.Object</code>
      <item>
        <code>Gio.IOStream</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
