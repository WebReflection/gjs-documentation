<?xml version="1.0"?>
<page id="Gio.File.enumerate_children"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.File" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Gio.FileEnumerator</api:type>
      </api:returns>
      <api:name>g_file_enumerate_children</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>attributes</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.FileQueryInfoFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.File.prototype.enumerate_children</title>
  <synopsis><code mime="text/x-gjs">
function enumerate_children(attributes: String, flags: <link xref="Gio.FileQueryInfoFlags">Gio.FileQueryInfoFlags</link>, cancellable: <link xref="Gio.Cancellable">Gio.Cancellable</link>): <link xref="Gio.FileEnumerator">Gio.FileEnumerator</link> {
    // Gjs wrapper for g_file_enumerate_children()
}
  </code></synopsis>
  <p>Gets the requested information about the files in a directory.
The result is a <link xref="Gio.FileEnumerator"/> object that will give out
<link xref="Gio.FileInfo"/> objects for all the files in the directory.</p>  <p>The <code>attributes</code> value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. <code>attributes</code> should
be a comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
#G_FILE_ATTRIBUTE_STANDARD_NAME.</p>  <p>If <code>cancellable</code> is not <code>null</code>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link xref="Gio.IOErrorEnum"/>.cancelled will be
returned.</p>  <p>If the file does not exist, the <link xref="Gio.IOErrorEnum"/>.not_found error will
be returned. If the file is not a directory, the <link xref="Gio.IOErrorEnum"/>.not_directory
error will be returned. Other errors are possible too.</p>

<terms>
<item>
<title><code>attributes</code></title>
  <p>an attribute query string</p>
</item>
<item>
<title><code>flags</code></title>
  <p>a set of <link xref="Gio.FileQueryInfoFlags"/></p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>optional <link xref="Gio.Cancellable"/> object,
    <code>null</code> to ignore</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>A <link xref="Gio.FileEnumerator"/> if successful,
    <code>null</code> on error. Free the returned object with <link href="../GObject-2.0/GObject.Object.unref.html">GObject.Object.prototype.unref</link>.</p>
</item>
</terms>

</page>
