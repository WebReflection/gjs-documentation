<?xml version="1.0"?>
<page id="Gio.Volume"
      type="guide"
      style="interface"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="interface" type="guide"/>
  </info>
  <title>Gio.Volume</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let volume = new Gio.Volume();
  </code></synopsis>
  <p>The <link xref="Gio.Volume"/> interface represents user-visible objects that can be
mounted. Note, when porting from GnomeVFS, <link xref="Gio.Volume"/> is the moral
equivalent of #GnomeVFSDrive.</p>  <p>Mounting a <link xref="Gio.Volume"/> instance is an asynchronous operation. For more
information about asynchronous operations, see <link xref="Gio.AsyncResult"/> and
<link xref="Gio.Task"/>. To mount a <link xref="Gio.Volume"/>, first call <link xref="Gio.Volume.mount"/> with (at
least) the <link xref="Gio.Volume"/> instance, optionally a <link xref="Gio.MountOperation"/> object
and a <link xref="Gio.AsyncReadyCallback"/>.</p>  <p>Typically, one will only want to pass <code>null</code> for the
<link xref="Gio.MountOperation"/> if automounting all volumes when a desktop session
starts since it's not desirable to put up a lot of dialogs asking
for credentials.</p>  <p>The callback will be fired when the operation has resolved (either
with success or failure), and a #GAsyncReady structure will be
passed to the callback.  That callback should then call
<link xref="Gio.Volume.mount_finish"/> with the <link xref="Gio.Volume"/> instance and the
#GAsyncReady data to see if the operation was completed
successfully.  If an @error is present when <link xref="Gio.Volume.mount_finish"/>
is called, then it will be filled with any error information.</p>  <p>## Volume Identifiers # {#volume-identifier}</p>  <p>It is sometimes necessary to directly access the underlying
operating system object behind a volume (e.g. for passing a volume
to an application via the commandline). For this purpose, GIO
allows to obtain an 'identifier' for the volume. There can be
different kinds of identifiers, such as Hal UDIs, filesystem labels,
traditional Unix devices (e.g. `/dev/sda2`), UUIDs. GIO uses predefined
strings as names for the different kinds of identifiers:
#G_VOLUME_IDENTIFIER_KIND_HAL_UDI, #G_VOLUME_IDENTIFIER_KIND_LABEL, etc.
Use <link xref="Gio.Volume.get_identifier"/> to obtain an identifier for a volume.</p>  <p>
Note that #G_VOLUME_IDENTIFIER_KIND_HAL_UDI will only be available
when the gvfs hal volume monitor is in use. Other volume monitors
will generally be able to provide the #G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
identifier, which can be used to obtain a hal device by means of
libhal_manager_find_device_string_match().</p>

  <synopsis>
    <title>Prerequisites</title>
    <p>Volume requires GObject.Object</p>
  </synopsis>
  <synopsis>
    <title>Known Implementations</title>
    <p>None</p>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
