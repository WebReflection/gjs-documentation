<?xml version="1.0"?>
<page id="Gio.Task.set_return_on_cancel"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.Task" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_task_set_return_on_cancel</api:name>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>return_on_cancel</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.Task.prototype.set_return_on_cancel</title>
  <synopsis><code mime="text/x-gjs">
function set_return_on_cancel(return_on_cancel: Boolean): Boolean {
    // Gjs wrapper for g_task_set_return_on_cancel()
}
  </code></synopsis>
  <p>Sets or clears <code>task</code>'s return-on-cancel flag. This is only
meaningful for tasks run via <link xref="Gio.Task.run_in_thread"/> or
<link xref="Gio.Task.run_in_thread_sync"/>.</p>  <p>If <code>return_on_cancel</code> is <code>true</code>, then cancelling <code>task</code>'s
<link xref="Gio.Cancellable"/> will immediately cause it to return, as though the
task's <link xref="Gio.TaskThreadFunc"/> had called
<link xref="Gio.Task.return_error_if_cancelled"/> and then returned.</p>  <p>This allows you to create a cancellable wrapper around an
uninterruptable function. The <link xref="Gio.TaskThreadFunc"/> just needs to be
careful that it does not modify any externally-visible state after
it has been cancelled. To do that, the thread should call
<link xref="Gio.Task.set_return_on_cancel"/> again to (atomically) set
return-on-cancel <code>false</code> before making externally-visible changes;
if the task gets cancelled before the return-on-cancel flag could
be changed, <link xref="Gio.Task.set_return_on_cancel"/> will indicate this by
returning <code>false</code>.</p>  <p>You can disable and re-enable this flag multiple times if you wish.
If the task's <link xref="Gio.Cancellable"/> is cancelled while return-on-cancel is
<code>false</code>, then calling <link xref="Gio.Task.set_return_on_cancel"/> to set it <code>true</code>
again will cause the task to be cancelled at that point.</p>  <p>If the task's <link xref="Gio.Cancellable"/> is already cancelled before you call
<link xref="Gio.Task.run_in_thread"/>/<link xref="Gio.Task.run_in_thread_sync"/>, then the
<link xref="Gio.TaskThreadFunc"/> will still be run (for consistency), but the task
will also be completed right away.</p>
  <p>Since 2.36</p>
<terms>
<item>
<title><code>return_on_cancel</code></title>
  <p>whether the task returns automatically when
  it is cancelled.</p>
</item>
<item>
<title><code>ok</code></title>
  <p><code>true</code> if <code>task</code>'s return-on-cancel flag was changed to
  match <code>return_on_cancel</code>. <code>false</code> if <code>task</code> has already been
  cancelled.</p>
</item>
</terms>

</page>
