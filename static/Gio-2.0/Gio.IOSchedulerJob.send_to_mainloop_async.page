<?xml version="1.0"?>
<page id="Gio.IOSchedulerJob.send_to_mainloop_async"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.IOSchedulerJob" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_io_scheduler_job_send_to_mainloop_async</api:name>
      <api:arg>
        <api:type>GLib.SourceFunc</api:type>
        <api:name>func</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.IOSchedulerJob.prototype.send_to_mainloop_async</title>
  <synopsis><code mime="text/x-gjs">
function send_to_mainloop_async(func: <link href="../GLib-2.0/GLib.SourceFunc.html">GLib.SourceFunc</link>): void {
    // Gjs wrapper for g_io_scheduler_job_send_to_mainloop_async()
}
  </code></synopsis>
  <p>Used from an I/O job to send a callback to be run asynchronously in
the thread that the job was started from. The callback will be run
when the main loop is available, but at that time the I/O job might
have finished. The return value from the callback is ignored.</p>  <p>Note that if you are passing the <code>user_data</code> from <link xref="Gio.io_scheduler_push_job"/>
on to this function you have to ensure that it is not freed before
<code>func</code> is called, either by passing <code>null</code> as <code>notify</code> to
<link xref="Gio.io_scheduler_push_job"/> or by using refcounting for <code>user_data</code>.</p>

<terms>
<item>
<title><code>func</code></title>
  <p>a <link href="../GLib-2.0/GLib.SourceFunc.html">GLib.SourceFunc</link> callback that will be called in the original thread</p>
</item>
</terms>

</page>
