<?xml version="1.0"?>
<page id="Gio.Socket.receive_message"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.Socket" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Number(gssize)</api:type>
      </api:returns>
      <api:name>g_socket_receive_message</api:name>
      <api:arg>
        <api:type>Array(Gio.InputVector)</api:type>
        <api:name>vectors</api:name>
      </api:arg>
      <api:arg>
        <api:type>Array(Gio.SocketControlMessage)</api:type>
        <api:name>messages</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.Socket.prototype.receive_message</title>
  <synopsis><code mime="text/x-gjs">
function receive_message(vectors: Array(<link xref="Gio.InputVector">Gio.InputVector</link>), messages: Array(<link xref="Gio.SocketControlMessage">Gio.SocketControlMessage</link>), flags: Number(gint), cancellable: <link xref="Gio.Cancellable">Gio.Cancellable</link>): [return_value: Number(gssize), address: <link xref="Gio.SocketAddress">Gio.SocketAddress</link>] {
    // Gjs wrapper for g_socket_receive_message()
}
  </code></synopsis>
  <p>Receive data from a socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
<link xref="Gio.Socket.receive"/> and <link xref="Gio.Socket.receive_from"/>.</p>  <p>If <code>address</code> is non-<code>null</code> then <code>address</code> will be set equal to the
source address of the received packet.
<code>address</code> is owned by the caller.</p>  <p>@vector must point to an array of <link xref="Gio.InputVector"/> structs and
<code>num_vectors</code> must be the length of this array.  These structs
describe the buffers that received data will be scattered into.
If <code>num_vectors</code> is -1, then <code>vectors</code> is assumed to be terminated
by a <link xref="Gio.InputVector"/> with a <code>null</code> buffer pointer.</p>  <p>As a special case, if <code>num_vectors</code> is 0 (in which case, <code>vectors</code>
may of course be <code>null</code>), then a single byte is received and
discarded. This is to facilitate the common practice of sending a
single '\0' byte for the purposes of transferring ancillary data.</p>  <p><code>messages</code>, if non-<code>null</code>, will be set to point to a newly-allocated
array of <link xref="Gio.SocketControlMessage"/> instances or <code>null</code> if no such
messages was received. These correspond to the control messages
received from the kernel, one <link xref="Gio.SocketControlMessage"/> per message
from the kernel. This array is <code>null</code>-terminated and must be freed
by the caller using <link href="../GLib-2.0/GLib.free.html">GLib.free</link> after calling <link href="../GObject-2.0/GObject.Object.unref.html">GObject.Object.prototype.unref</link> on each
element. If <code>messages</code> is <code>null</code>, any control messages received will
be discarded.</p>  <p><code>num_messages</code>, if non-<code>null</code>, will be set to the number of control
messages received.</p>  <p>If both <code>messages</code> and <code>num_messages</code> are non-<code>null</code>, then
<code>num_messages</code> gives the number of <link xref="Gio.SocketControlMessage"/> instances
in <code>messages</code> (ie: not including the <code>null</code> terminator).</p>  <p><code>flags</code> is an in/out parameter. The commonly available arguments
for this are available in the <link xref="Gio.SocketMsgFlags"/> enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too
(and <link xref="Gio.Socket.receive_message"/> may pass system-specific flags out).</p>  <p>As with <link xref="Gio.Socket.receive"/>, data may be discarded if <code>socket</code> is
<link xref="Gio.SocketType"/>.datagram or <link xref="Gio.SocketType"/>.seqpacket and you do not
provide enough buffer space to read a complete message. You can pass
<link xref="Gio.SocketMsgFlags"/>.peek in <code>flags</code> to peek at the current message without
removing it from the receive queue, but there is no portable way to find
out the length of the message other than by reading it into a
sufficiently-large buffer.</p>  <p>If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a <link xref="Gio.IOErrorEnum"/>.would_block error will be
returned. To be notified when data is available, wait for the
<link href="../GLib-2.0/GLib.IOCondition.html">GLib.IOCondition</link>.in condition.</p>  <p>On error -1 is returned and @error is set accordingly.</p>
  <p>Since 2.22</p>
<terms>
<item>
<title><code>vectors</code></title>
  <p>an array of <link xref="Gio.InputVector"/> structs</p>
</item>
<item>
<title><code>messages</code></title>
  <p>a pointer which
   may be filled with an array of #GSocketControlMessages, or <code>null</code></p>
</item>
<item>
<title><code>flags</code></title>
  <p>a pointer to an int containing <link xref="Gio.SocketMsgFlags"/> flags</p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>a %GCancellable or <code>null</code></p>
</item>
<item>
<title><code>return_value</code></title>
  <p>Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error</p>
</item>
<item>
<title><code>address</code></title>
  <p>a pointer to a <link xref="Gio.SocketAddress"/>
    pointer, or <code>null</code></p>
</item>
</terms>

</page>
