<?xml version="1.0"?>
<page id="GLib.access"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Number(gint)</api:type>
      </api:returns>
      <api:name>g_access</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>filename</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>mode</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.access</title>
  <synopsis><code mime="text/x-gjs">
function access(filename: String, mode: Number(gint)): Number(gint) {
    // Gjs wrapper for g_access()
}
  </code></synopsis>
  <p>A wrapper for the POSIX access() function. This function is used to
test a pathname for one or several of read, write or execute
permissions, or just existence.</p>  <p>On Windows, the file protection mechanism is not at all POSIX-like,
and the underlying function in the C library only checks the
FAT-style READONLY attribute, and does not look at the ACL of a
file at all. This function is this in practise almost useless on
Windows. Software that needs to handle file permissions on Windows
more exactly should use the Win32 API.</p>  <p>See your C library manual for more details about access().</p>
  <p>Since 2.8</p>
<terms>
<item>
<title><code>filename</code></title>
  <p>a pathname in the GLib file name encoding (UTF-8 on Windows)</p>
</item>
<item>
<title><code>mode</code></title>
  <p>as in access()</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>zero if the pathname refers to an existing file system
    object that has all the tested permissions, or -1 otherwise
    or on error.</p>
</item>
</terms>

</page>
