<?xml version="1.0"?>
<page id="GLib.test_trap_fork"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_test_trap_fork</api:name>
      <api:arg>
        <api:type>Number(guint64)</api:type>
        <api:name>usec_timeout</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.TestTrapFlags</api:type>
        <api:name>test_trap_flags</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.test_trap_fork</title>
  <synopsis><code mime="text/x-gjs">
function test_trap_fork(usec_timeout: Number(guint64), test_trap_flags: <link xref="GLib.TestTrapFlags">GLib.TestTrapFlags</link>): Boolean {
    // Gjs wrapper for g_test_trap_fork()
}
  </code></synopsis>
  <p>Fork the current test program to execute a test case that might
not return or that might abort.</p>  <p>If <code>usec_timeout</code> is non-0, the forked test case is aborted and
considered failing if its run time exceeds it.</p>  <p>The forking behavior can be configured with the <link xref="GLib.TestTrapFlags"/> flags.</p>  <p>In the following example, the test code forks, the forked child
process produces some sample output and exits successfully.
The forking parent process then asserts successful child program
termination and validates child program outputs.</p>  <p>|[&lt;!-- language="C" --&gt;
  static void
  test_fork_patterns (void)
  {
    if (g_test_trap_fork (0, G_TEST_TRAP_SILENCE_STDOUT | G_TEST_TRAP_SILENCE_STDERR))
      {
        g_print ("some stdout text: somagic17\n");
        g_printerr ("some stderr text: semagic43\n");
        exit (0); // successful test run
      }
    g_test_trap_assert_passed ();
    g_test_trap_assert_stdout ("*somagic17*");
    g_test_trap_assert_stderr ("*semagic43*");
  }
]|</p>
  <p>Since 2.16</p>
<terms>
<item>
<title><code>usec_timeout</code></title>
  <p>Timeout for the forked test in micro seconds.</p>
</item>
<item>
<title><code>test_trap_flags</code></title>
  <p>Flags to modify forking behaviour.</p>
</item>
<item>
<title><code>ok</code></title>
  <p><code>true</code> for the forked child and <code>false</code> for the executing parent process.</p>
</item>
</terms>

</page>
