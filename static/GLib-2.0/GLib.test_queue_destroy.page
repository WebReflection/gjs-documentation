<?xml version="1.0"?>
<page id="GLib.test_queue_destroy"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_test_queue_destroy</api:name>
      <api:arg>
        <api:type>GLib.DestroyNotify</api:type>
        <api:name>destroy_func</api:name>
      </api:arg>
      <api:arg>
        <api:type>void</api:type>
        <api:name>destroy_data</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.test_queue_destroy</title>
  <synopsis><code mime="text/x-gjs">
function test_queue_destroy(destroy_func: <link xref="GLib.DestroyNotify">GLib.DestroyNotify</link>, destroy_data: void): void {
    // Gjs wrapper for g_test_queue_destroy()
}
  </code></synopsis>
  <p>This function enqueus a callback <code>destroy_func</code> to be executed
during the next test case teardown phase. This is most useful
to auto destruct allocted test resources at the end of a test run.
Resources are released in reverse queue order, that means enqueueing
callback A before callback B will cause B() to be called before
A() during teardown.</p>
  <p>Since 2.16</p>
<terms>
<item>
<title><code>destroy_func</code></title>
  <p>Destroy callback for teardown phase.</p>
</item>
<item>
<title><code>destroy_data</code></title>
  <p>Destroy callback data.</p>
</item>
</terms>

</page>
