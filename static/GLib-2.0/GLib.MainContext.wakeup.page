<?xml version="1.0"?>
<page id="GLib.MainContext.wakeup"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.MainContext" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_main_context_wakeup</api:name>
    </api:function>
  </info>
  <title>GLib.MainContext.prototype.wakeup</title>
  <synopsis><code mime="text/x-gjs">
function wakeup(): void {
    // Gjs wrapper for g_main_context_wakeup()
}
  </code></synopsis>
  <p>If <code>context</code> is currently blocking in <link xref="GLib.MainContext.iteration"/>
waiting for a source to become ready, cause it to stop blocking
and return.  Otherwise, cause the next invocation of
<link xref="GLib.MainContext.iteration"/> to return without blocking.</p>  <p>This API is useful for low-level control over <link xref="GLib.MainContext"/>; for
example, integrating it with main loop implementations such as
<link xref="GLib.MainLoop"/>.</p>  <p>Another related use for this function is when implementing a main
loop with a termination condition, computed from multiple threads:</p>  <p>|[&lt;!-- language="C" --&gt;
  #define NUM_TASKS 10
  static volatile gint tasks_remaining = NUM_TASKS;
  ...
 
  while (g_atomic_int_get (&amp;tasks_remaining) != 0)
    g_main_context_iteration (NULL, TRUE);
]|
 
Then in a thread:
|[&lt;!-- language="C" --&gt;
  perform_work();</p>  <p>  if (g_atomic_int_dec_and_test (&amp;tasks_remaining))
    g_main_context_wakeup (NULL);
]|</p>


</page>
