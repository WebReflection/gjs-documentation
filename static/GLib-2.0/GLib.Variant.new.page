<?xml version="1.0"?>
<page id="GLib.Variant.new"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Variant" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>GLib.Variant</api:type>
      </api:returns>
      <api:name>g_variant_new</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>type</api:name>
      </api:arg>
      <api:arg>
        <api:type>Any</api:type>
        <api:name>value</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.Variant.new</title>
  <synopsis><code mime="text/x-gjs">
function new(type: String, value: Any): <link xref="GLib.Variant">GLib.Variant</link> {
    // Gjs wrapper for g_variant_new_array()
}
  </code></synopsis>
  <p>Creates a new <link xref="GLib.Variant"/> according to the <code>type</code> provided, which must be a <link xref="GLib.VariantType.is_definite">definite
  type</link>.</p>
  <p>If <code>type</code> is a fundamental numeric or string type, then
  <code>value</code> must be an appropriate JS primitive value.</p>
  <p>If <code>type</code> is <code>v</code>, then <code>value</code> must
  be a <link xref="GLib.Variant"/>.</p>
  <p>If <code>type</code> ia a maybe type, then <code>value</code> can
  be <code>null</code> or a value of the correct type.</p>
  <p>If <code>type</code> is an array type, then <code>value</code> must
  be an array of appropriate values. As a special case, if <code>type</code>
  is <code>ay</code>, then a ByteArray can be used, which can avoid memory
  copies when not needed.</p>
  <p>If <code>type</code> is a tuple, then <code>value</code> must be
  an array of appropriate values, whose length must be the number of elements
  in the tuple.</p>
  <p>If <code>type</code> is a dictionary entry, then <code>value</code>
  must be a two elements array, where the two elements are the key and
  the value. As a special case, to obtain an array of dictionary entries
  (ie, a dictionary) you must not pass an array of two-element arrays but
  an object whose property names are the dictionary keys and whose property
  values are the dictionary values.
  </p>
  <example><code mime="text/x-gjs">
let int = new GLib.Variant('u', 42);
let tuple = new GLib.Variant('(us)', [42, 'foo']);
let array = new GLib.Variant('as', ['foo', 'bar', 'baz']);
let byteArray = new GLib.Variant('ay', 'byte content');
let dictionary = new GLib.Variant('a{sv}', { 'key1': new GLib.Variant('u', 42),
                                             'key2': new GLib.Variant('s', 'string') });
  </code></example>
<terms>
<item>
<title><code>type</code></title>
  <p>the type of the new variant, as a string</p>
</item>
<item>
<title><code>value</code></title>
  <p>the JS value to build the <link xref="GLib.Variant"/> from</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>a new <link xref="GLib.Variant"/></p>
</item>
</terms>

</page>
