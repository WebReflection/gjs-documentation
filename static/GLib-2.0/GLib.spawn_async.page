<?xml version="1.0"?>
<page id="GLib.spawn_async"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_spawn_async</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>working_directory</api:name>
      </api:arg>
      <api:arg>
        <api:type>Array(String)</api:type>
        <api:name>argv</api:name>
      </api:arg>
      <api:arg>
        <api:type>Array(String)</api:type>
        <api:name>envp</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.SpawnFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.SpawnChildSetupFunc</api:type>
        <api:name>child_setup</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.spawn_async</title>
  <synopsis><code mime="text/x-gjs">
function spawn_async(working_directory: String, argv: Array(String), envp: Array(String), flags: <link xref="GLib.SpawnFlags">GLib.SpawnFlags</link>, child_setup: <link xref="GLib.SpawnChildSetupFunc">GLib.SpawnChildSetupFunc</link>): [ok: Boolean, child_pid: <link xref="GLib.Pid">GLib.Pid</link>] {
    // Gjs wrapper for g_spawn_async()
}
  </code></synopsis>
  <p>See <link xref="GLib.spawn_async_with_pipes"/> for a full description; this function
simply calls the <link xref="GLib.spawn_async_with_pipes"/> without any pipes.</p>  <p>You should call <link xref="GLib.spawn_close_pid"/> on the returned child process
reference when you don't need it any more.</p>  <p>If you are writing a GTK+ application, and the program you are
spawning is a graphical application, too, then you may want to
use gdk_spawn_on_screen() instead to ensure that the spawned program
opens its windows on the right screen.</p>  <p>Note that the returned <code>child_pid</code> on Windows is a handle to the child
process and not its identifier. Process handles and process identifiers
are different concepts on Windows.</p>

<terms>
<item>
<title><code>working_directory</code></title>
  <p>child's current working directory, or <code>null</code> to inherit parent's</p>
</item>
<item>
<title><code>argv</code></title>
  <p>child's argument vector</p>
</item>
<item>
<title><code>envp</code></title>
  <p>child's environment, or <code>null</code> to inherit parent's</p>
</item>
<item>
<title><code>flags</code></title>
  <p>flags from <link xref="GLib.SpawnFlags"/></p>
</item>
<item>
<title><code>child_setup</code></title>
  <p>function to run in the child just before exec()</p>
</item>
<item>
<title><code>ok</code></title>
  <p><code>true</code> on success, <code>false</code> if error is set</p>
</item>
<item>
<title><code>child_pid</code></title>
  <p>return location for child process reference, or <code>null</code></p>
</item>
</terms>

</page>
