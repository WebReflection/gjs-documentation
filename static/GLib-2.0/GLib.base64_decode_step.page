<?xml version="1.0"?>
<page id="GLib.base64_decode_step"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Number(gsize)</api:type>
      </api:returns>
      <api:name>g_base64_decode_step</api:name>
      <api:arg>
        <api:type>ByteArray</api:type>
        <api:name>in</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>state</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(guint)</api:type>
        <api:name>save</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.base64_decode_step</title>
  <synopsis><code mime="text/x-gjs">
function base64_decode_step(in: ByteArray, state: Number(gint), save: Number(guint)): [return_value: Number(gsize), out: ByteArray, state: Number(gint), save: Number(guint)] {
    // Gjs wrapper for g_base64_decode_step()
}
  </code></synopsis>
  <p>Incrementally decode a sequence of binary data from its Base-64 stringified
representation. By calling this function multiple times you can convert
data in chunks to avoid having to have the full encoded data in memory.</p>  <p>The output buffer must be large enough to fit all the data that will
be written to it. Since base64 encodes 3 bytes in 4 chars you need
at least: (<code>len</code> / 4) * 3 + 3 bytes (+ 3 may be needed in case of non-zero
state).</p>
  <p>Since 2.12</p>
<terms>
<item>
<title><code>in</code></title>
  <p>binary input data</p>
</item>
<item>
<title><code>state</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
<item>
<title><code>save</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
<item>
<title><code>return_value</code></title>
  <p>The number of bytes of output that was written</p>
</item>
<item>
<title><code>out</code></title>
  <p>output buffer</p>
</item>
<item>
<title><code>state (out)</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
<item>
<title><code>save (out)</code></title>
  <p>Saved state between steps, initialize to 0</p>
</item>
</terms>

</page>
