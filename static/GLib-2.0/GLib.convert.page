<?xml version="1.0"?>
<page id="GLib.convert"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>String</api:type>
      </api:returns>
      <api:name>g_convert</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>str</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gssize)</api:type>
        <api:name>len</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>to_codeset</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>from_codeset</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.convert</title>
  <synopsis><code mime="text/x-gjs">
function convert(str: String, len: Number(gssize), to_codeset: String, from_codeset: String): [return_value: String, bytes_read: Number(gsize), bytes_written: Number(gsize)] {
    // Gjs wrapper for g_convert()
}
  </code></synopsis>
  <p>Converts a string from one character set to another.</p>  <p>Note that you should use <link xref="GLib.iconv"/> for streaming conversions.
Despite the fact that @byes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to <link xref="GLib.convert"/>,
<link xref="GLib.convert_with_iconv"/> or <link xref="GLib.convert_with_fallback"/>. (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)</p>  <p>Using extensions such as "//TRANSLIT" may not work (or may not work
well) on many platforms.  Consider using <link xref="GLib.str_to_ascii"/> instead.</p>

<terms>
<item>
<title><code>str</code></title>
  <p>the string to convert</p>
</item>
<item>
<title><code>len</code></title>
  <p>the length of the string, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the <code>len</code> parameter is unsafe)</p>
</item>
<item>
<title><code>to_codeset</code></title>
  <p>name of character set into which to convert <code>str</code></p>
</item>
<item>
<title><code>from_codeset</code></title>
  <p>character set of <code>str</code>.</p>
</item>
<item>
<title><code>return_value</code></title>

</item>
<item>
<title><code>bytes_read</code></title>
  <p>location to store the number of bytes in the
                input string that were successfully converted, or <code>null</code>.
                Even if the conversion was successful, this may be
                less than <code>len</code> if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.</p>
</item>
<item>
<title><code>bytes_written</code></title>
  <p>the number of bytes stored in the output buffer (not
                including the terminating nul).</p>
</item>
</terms>

</page>
