<?xml version="1.0"?>
<page id="GLib.spawn_command_line_sync"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_spawn_command_line_sync</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>command_line</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.spawn_command_line_sync</title>
  <synopsis><code mime="text/x-gjs">
function spawn_command_line_sync(command_line: String): [ok: Boolean, standard_output: ByteArray, standard_error: ByteArray, exit_status: Number(gint)] {
    // Gjs wrapper for g_spawn_command_line_sync()
}
  </code></synopsis>
  <p>A simple version of <link xref="GLib.spawn_sync"/> with little-used parameters
removed, taking a command line instead of an argument vector.  See
<link xref="GLib.spawn_sync"/> for full details. <code>command_line</code> will be parsed by
<link xref="GLib.shell_parse_argv"/>. Unlike <link xref="GLib.spawn_sync"/>, the <link xref="GLib.SpawnFlags"/>.search_path flag
is enabled. Note that <link xref="GLib.SpawnFlags"/>.search_path can have security
implications, so consider using <link xref="GLib.spawn_sync"/> directly if
appropriate. Possible errors are those from <link xref="GLib.spawn_sync"/> and those
from <link xref="GLib.shell_parse_argv"/>.</p>  <p>If <code>exit_status</code> is non-<code>null</code>, the platform-specific exit status of
the child is stored there; see the documentation of
<link xref="GLib.spawn_check_exit_status"/> for how to use and interpret this.</p>  <p>On Windows, please note the implications of <link xref="GLib.shell_parse_argv"/>
parsing <code>command_line</code>. Parsing is done according to Unix shell rules, not
Windows command interpreter rules.
Space is a separator, and backslashes are
special. Thus you cannot simply pass a <code>command_line</code> containing
canonical Windows paths, like "c:\\program files\\app\\app.exe", as
the backslashes will be eaten, and the space will act as a
separator. You need to enclose such paths with single quotes, like
"'c:\\program files\\app\\app.exe' 'e:\\folder\\argument.txt'".</p>

<terms>
<item>
<title><code>command_line</code></title>
  <p>a command line</p>
</item>
<item>
<title><code>ok</code></title>
  <p><code>true</code> on success, <code>false</code> if an error was set</p>
</item>
<item>
<title><code>standard_output</code></title>
  <p>return location for child output</p>
</item>
<item>
<title><code>standard_error</code></title>
  <p>return location for child errors</p>
</item>
<item>
<title><code>exit_status</code></title>
  <p>return location for child exit status, as returned by waitpid()</p>
</item>
</terms>

</page>
