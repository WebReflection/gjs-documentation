<?xml version="1.0"?>
<page id="GLib.Scanner.peek_next_token"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Scanner" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>GLib.TokenType</api:type>
      </api:returns>
      <api:name>g_scanner_peek_next_token</api:name>
    </api:function>
  </info>
  <title>GLib.Scanner.prototype.peek_next_token</title>
  <synopsis><code mime="text/x-gjs">
function peek_next_token(): <link xref="GLib.TokenType">GLib.TokenType</link> {
    // Gjs wrapper for g_scanner_peek_next_token()
}
  </code></synopsis>
  <p>Parses the next token, without removing it from the input stream.
The token data is placed in the @next_token, @next_value, @next_line,
and @next_position fields of the <link xref="GLib.Scanner"/> structure.</p>  <p>Note that, while the token is not removed from the input stream
(i.e. the next call to <link xref="GLib.Scanner.get_next_token"/> will return the
same token), it will not be reevaluated. This can lead to surprising
results when changing scope or the scanner configuration after peeking
the next token. Getting the next token after switching the scope or
configuration will return whatever was peeked before, regardless of
any symbols that may have been added or removed in the new scope.</p>

<terms>
<item>
<title><code>Returns</code></title>
  <p>the type of the token</p>
</item>
</terms>

</page>
