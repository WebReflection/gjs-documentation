<?xml version="1.0"?>
<page id="GLib.test_trap_subprocess"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_test_trap_subprocess</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>test_path</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(guint64)</api:type>
        <api:name>usec_timeout</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.TestSubprocessFlags</api:type>
        <api:name>test_flags</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.test_trap_subprocess</title>
  <synopsis><code mime="text/x-gjs">
function test_trap_subprocess(test_path: String, usec_timeout: Number(guint64), test_flags: <link xref="GLib.TestSubprocessFlags">GLib.TestSubprocessFlags</link>): void {
    // Gjs wrapper for g_test_trap_subprocess()
}
  </code></synopsis>
  <p>Respawns the test program to run only <code>test_path</code> in a subprocess.
This can be used for a test case that might not return, or that
might abort.</p>  <p>If <code>test_path</code> is <code>null</code> then the same test is re-run in a subprocess.
You can use <link xref="GLib.test_subprocess"/> to determine whether the test is in
a subprocess or not.</p>  <p><code>test_path</code> can also be the name of the parent test, followed by
"`/subprocess/`" and then a name for the specific subtest (or just
ending with "`/subprocess`" if the test only has one child test);
tests with names of this form will automatically be skipped in the
parent process.</p>  <p>If <code>usec_timeout</code> is non-0, the test subprocess is aborted and
considered failing if its run time exceeds it.</p>  <p>The subprocess behavior can be configured with the
<link xref="GLib.TestSubprocessFlags"/> flags.</p>  <p>You can use methods such as g_test_trap_assert_passed(),
g_test_trap_assert_failed(), and g_test_trap_assert_stderr() to
check the results of the subprocess. (But note that
g_test_trap_assert_stdout() and g_test_trap_assert_stderr()
cannot be used if <code>test_flags</code> specifies that the child should
inherit the parent stdout/stderr.)</p>  <p>If your `main ()` needs to behave differently in
the subprocess, you can call <link xref="GLib.test_subprocess"/> (after calling
<link xref="GLib.test_init"/>) to see whether you are in a subprocess.</p>  <p>The following example tests that calling
`my_object_new(1000000)` will abort with an error
message.</p>  <p>|[&lt;!-- language="C" --&gt;
  static void
  test_create_large_object_subprocess (void)
  {
    if (g_test_subprocess ())
      {
        my_object_new (1000000);
        return;
      }</p>  <p>    // Reruns this same test in a subprocess
    g_test_trap_subprocess (NULL, 0, 0);
    g_test_trap_assert_failed ();
    g_test_trap_assert_stderr ("*ERROR*too large*");
  }</p>  <p>  int
  main (int argc, char **argv)
  {
    g_test_init (&amp;argc, &amp;argv, NULL);</p>  <p>    g_test_add_func ("/myobject/create_large_object",
                     test_create_large_object);
    return g_test_run ();
  }
]|</p>
  <p>Since 2.38</p>
<terms>
<item>
<title><code>test_path</code></title>
  <p>Test to run in a subprocess</p>
</item>
<item>
<title><code>usec_timeout</code></title>
  <p>Timeout for the subprocess test in micro seconds.</p>
</item>
<item>
<title><code>test_flags</code></title>
  <p>Flags to modify subprocess behaviour.</p>
</item>
</terms>

</page>
