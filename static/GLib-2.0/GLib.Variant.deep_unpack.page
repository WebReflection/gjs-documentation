<?xml version="1.0"?>
<page id="GLib.Variant.deep_unpack"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Variant" group="method" type="guide"/>
  </info>
  <title>GLib.Variant.prototype.deep_unpack</title>
  <synopsis><code mime="text/x-gjs">
function deep_unpack(): Any {
    // Gjs wrapper for g_variant_get()
}
  </code></synopsis>
  <p>This method operates like <link xref="GLib.Variant.deep_unpack"/>
  but also unpacks recursively in case of maybe types, arrays,
  tuples and dictionary entries.
  </p>
  <p>Thus for example, on a <link xref="GLib.Variant"/> of type <code>au</code>,
  <link xref="GLib.Variant.unpack"/> will return an array of variants
  holding <code>u</code>, while this methods returns an array of numbers.</p>
  <p>Similarly, on a <link xref="GLib.Variant"/> of type <code>ms</code>,
  this method returns a string or <code>null</code>, while <link xref="GLib.Variant.unpack"/>
  returns <code>null</code> or a variant holding a string.</p>
  <p>Note though that this method operates identically to <link xref="GLib.Variant.unpack"/>
  for variants holding <code>v</code>, so on the common <code>a{sv}</code>
  case, calling <code>deep_unpack()</code> will return an object whose
  property names are the dictionary keys (as JS strings) and whose
  property values are <link xref="GLib.Variant"/>s. For comparison,
  <link xref="GLib.Variant.unpack"/> on the same variant would return
  an object whose property names are the same, but whose values are
  variant holding <code>v</code>.</p>
  <p>In practice, this means you should always use this method and
  never <link xref="GLib.Variant.unpack"/>, unless the type information
  is important to you.</p>
</page>
