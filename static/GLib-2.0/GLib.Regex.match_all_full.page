<?xml version="1.0"?>
<page id="GLib.Regex.match_all_full"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GLib.Regex" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Boolean</api:type>
      </api:returns>
      <api:name>g_regex_match_all_full</api:name>
      <api:arg>
        <api:type>Array(String)</api:type>
        <api:name>string</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>start_position</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.RegexMatchFlags</api:type>
        <api:name>match_options</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GLib.Regex.prototype.match_all_full</title>
  <synopsis><code mime="text/x-gjs">
function match_all_full(string: Array(String), start_position: Number(gint), match_options: <link xref="GLib.RegexMatchFlags">GLib.RegexMatchFlags</link>): [ok: Boolean, match_info: <link xref="GLib.MatchInfo">GLib.MatchInfo</link>] {
    // Gjs wrapper for g_regex_match_all_full()
}
  </code></synopsis>
  <p>Using the standard algorithm for regular expression matching only
the longest match in the string is retrieved, it is not possible
to obtain all the available matches. For instance matching
"&lt;a&gt; &lt;b&gt; &lt;c&gt;" against the pattern "&lt;.*&gt;"
you get "&lt;a&gt; &lt;b&gt; &lt;c&gt;".</p>  <p>This function uses a different algorithm (called DFA, i.e. deterministic
finite automaton), so it can retrieve all the possible matches, all
starting at the same point in the string. For instance matching
"&lt;a&gt; &lt;b&gt; &lt;c&gt;" against the pattern "&lt;.*&gt;;"
you would obtain three matches: "&lt;a&gt; &lt;b&gt; &lt;c&gt;",
"&lt;a&gt; &lt;b&gt;" and "&lt;a&gt;".</p>  <p>The number of matched strings is retrieved using
<link xref="GLib.MatchInfo.get_match_count"/>. To obtain the matched strings and
their position you can use, respectively, <link xref="GLib.MatchInfo.fetch"/> and
<link xref="GLib.MatchInfo.fetch_pos"/>. Note that the strings are returned in
reverse order of length; that is, the longest matching string is
given first.</p>  <p>Note that the DFA algorithm is slower than the standard one and it
is not able to capture substrings, so backreferences do not work.</p>  <p>Setting <code>start_position</code> differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as "\b".</p>  <p>A <link xref="GLib.MatchInfo"/> structure, used to get information on the match, is
stored in <code>match_info</code> if not <code>null</code>. Note that if <code>match_info</code> is
not <code>null</code> then it is created even if the function returns <code>false</code>,
i.e. you must free it regardless if regular expression actually
matched.</p>  <p><code>string</code> is not copied and is used in <link xref="GLib.MatchInfo"/> internally. If
you use any <link xref="GLib.MatchInfo"/> method (except <link xref="GLib.MatchInfo.free"/>) after
freeing or modifying <code>string</code> then the behaviour is undefined.</p>
  <p>Since 2.14</p>
<terms>
<item>
<title><code>string</code></title>
  <p>the string to scan for matches</p>
</item>
<item>
<title><code>start_position</code></title>
  <p>starting index of the string to match</p>
</item>
<item>
<title><code>match_options</code></title>
  <p>match options</p>
</item>
<item>
<title><code>ok</code></title>
  <p><code>true</code> is the string matched, <code>false</code> otherwise</p>
</item>
<item>
<title><code>match_info</code></title>
  <p>pointer to location where to store
    the <link xref="GLib.MatchInfo"/>, or <code>null</code> if you do not need it</p>
</item>
</terms>

</page>
