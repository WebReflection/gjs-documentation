<?xml version="1.0"?>
<page id="GObject.type_add_interface_dynamic"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_type_add_interface_dynamic</api:name>
      <api:arg>
        <api:type>GType</api:type>
        <api:name>instance_type</api:name>
      </api:arg>
      <api:arg>
        <api:type>GType</api:type>
        <api:name>interface_type</api:name>
      </api:arg>
      <api:arg>
        <api:type>GObject.TypePlugin</api:type>
        <api:name>plugin</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GObject.type_add_interface_dynamic</title>
  <synopsis><code mime="text/x-gjs">
function type_add_interface_dynamic(instance_type: GType, interface_type: GType, plugin: GObject.TypePlugin): void {
    // Gjs wrapper for g_type_add_interface_dynamic()
}
  </code></synopsis>
  <p>Adds the dynamic <code>interface_type</code> to @instantiable_type. The information
contained in the <link xref="GObject.TypePlugin"/> structure pointed to by <code>plugin</code>
is used to manage the relationship.</p>

<terms>
<item>
<title><code>instance_type</code></title>
  <p><link xref="GLib.Type"/> value of an instantiable type</p>
</item>
<item>
<title><code>interface_type</code></title>
  <p><link xref="GLib.Type"/> value of an interface type</p>
</item>
<item>
<title><code>plugin</code></title>
  <p><link xref="GObject.TypePlugin"/> structure to retrieve the <link xref="GObject.InterfaceInfo"/> from</p>
</item>
</terms>

</page>
