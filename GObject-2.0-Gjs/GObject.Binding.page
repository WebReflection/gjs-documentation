<?xml version="1.0"?>
<page id="GObject.Binding"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>GObject.Binding</title>
  <synopsis><code>
const GObject = imports.gi.GObject;

let binding = new GObject.Binding({
    <link xref='GObject.Binding-flags'>flags</link>: value,
    <link xref='GObject.Binding-source'>source</link>: value,
    <link xref='GObject.Binding-source-property'>source_property</link>: value,
    <link xref='GObject.Binding-target'>target</link>: value,
    <link xref='GObject.Binding-target-property'>target_property</link>: value,
});
  </code></synopsis>
  <p><link xref="GObject.Binding"/> is the representation of a binding between a property on a
<link xref="GObject.Object"/> instance (or source) and another property on another <link xref="GObject.Object"/>
instance (or target). Whenever the source property changes, the same
value is applied to the target property; for instance, the following
binding:</p>  <p>|[&lt;!-- language="C" --&gt;
  g_object_bind_property (object1, "property-a",
                          object2, "property-b",
                          G_BINDING_DEFAULT);
]|</p>  <p>will cause the property named "property-b" of @object2 to be updated
every time <link xref="GObject.set"/> or the specific accessor changes the value of
the property "property-a" of @object1.</p>  <p>It is possible to create a bidirectional binding between two properties
of two <link xref="GObject.Object"/> instances, so that if either property changes, the
other is updated as well, for instance:</p>  <p>|[&lt;!-- language="C" --&gt;
  g_object_bind_property (object1, "property-a",
                          object2, "property-b",
                          G_BINDING_BIDIRECTIONAL);
]|</p>  <p>will keep the two properties in sync.</p>  <p>It is also possible to set a custom transformation function (in both
directions, in case of a bidirectional binding) to apply a custom
transformation from the source value to the target value before
applying it; for instance, the following binding:</p>  <p>|[&lt;!-- language="C" --&gt;
  g_object_bind_property_full (adjustment1, "value",
                               adjustment2, "value",
                               G_BINDING_BIDIRECTIONAL,
                               celsius_to_fahrenheit,
                               fahrenheit_to_celsius,
                               NULL, NULL);
]|</p>  <p>will keep the "value" property of the two adjustments in sync; the
@celsius_to_fahrenheit function will be called whenever the "value"
property of @adjustment1 changes and will transform the current value
of the property before applying it to the "value" property of @adjustment2.</p>  <p>Vice versa, the @fahrenheit_to_celsius function will be called whenever
the "value" property of @adjustment2 changes, and will transform the
current value of the property before applying it to the "value" property
of @adjustment1.</p>  <p>Note that <link xref="GObject.Binding"/> does not resolve cycles by itself; a cycle like</p>  <p>|[
  object1:propertyA -&gt; object2:propertyB
  object2:propertyB -&gt; object3:propertyC
  object3:propertyC -&gt; object1:propertyA
]|</p>  <p>might lead to an infinite loop. The loop, in this particular case,
can be avoided if the objects emit the <link xref="GObject.notify"/> signal only
if the value has effectively been changed. A binding is implemented
using the <link xref="GObject.notify"/> signal, so it is susceptible to all the
various ways of blocking a signal emission, like <link xref="GObject.signal_stop_emission"/>
or <link xref="GObject.signal_handler_block"/>.</p>  <p>A binding will be severed, and the resources it allocates freed, whenever
either one of the <link xref="GObject.Object"/> instances it refers to are finalized, or when
the <link xref="GObject.Binding"/> instance loses its last reference.</p>  <p>Bindings for languages with garbage collection can use
<link xref="GObject.unbind"/> to explicitly release a binding between the source
and target properties, instead of relying on the last reference on the
binding, source, and target instances to drop.</p>  <p><link xref="GObject.Binding"/> is available since GObject 2.26</p>
  <p>Since 2.26</p>
  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>GObject.Object</code>
      <item>
        <code>GObject.Binding</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
