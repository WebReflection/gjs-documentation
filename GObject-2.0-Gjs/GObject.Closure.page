<?xml version="1.0"?>
<page id="GObject.Closure"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>GObject.Closure</title>
  <synopsis><code>
const GObject = imports.gi.GObject;

let closure = new GObject.Closure({
    <link xref='GObject.Closure-in_marshal'>in_marshal</link>: value
    <link xref='GObject.Closure-is_invalid'>is_invalid</link>: value
});
  </code></synopsis>
  <p>A <link xref="GObject.Closure"/> represents a callback supplied by the programmer. It
will generally comprise a function of some kind and a marshaller
used to call it. It is the reponsibility of the marshaller to
convert the arguments for the invocation from #GValues into
a suitable form, perform the callback on the converted arguments,
and transform the return value back into a <link xref="GObject.Value"/>.</p>  <p>In the case of C programs, a closure usually just holds a pointer
to a function and maybe a data argument, and the marshaller
converts between <link xref="GObject.Value"/> and native C types. The GObject
library provides the <link xref="GObject.CClosure"/> type for this purpose. Bindings for
other languages need marshallers which convert between <link xref="GObject.Value"/>&lt;!--
--&gt;s and suitable representations in the runtime of the language in
order to use functions written in that languages as callbacks.</p>  <p>Within GObject, closures play an important role in the
implementation of signals. When a signal is registered, the
@c_marshaller argument to <link xref="GObject.signal_new"/> specifies the default C
marshaller for any closure which is connected to this
signal. GObject provides a number of C marshallers for this
purpose, see the g_cclosure_marshal_*() functions. Additional C
marshallers can be generated with the [glib-genmarshal][glib-genmarshal]
utility.  Closures can be explicitly connected to signals with
<link xref="GObject.signal_connect_closure"/>, but it usually more convenient to let
GObject create a closure automatically by using one of the
g_signal_connect_*() functions which take a callback function/user
data pair.</p>  <p>Using closures has a number of important advantages over a simple
callback function/data pointer combination:</p>  <p>- Closures allow the callee to get the types of the callback parameters,
  which means that language bindings don't have to write individual glue
  for each callback type.</p>  <p>- The reference counting of <link xref="GObject.Closure"/> makes it easy to handle reentrancy
  right; if a callback is removed while it is being invoked, the closure
  and its parameters won't be freed until the invocation finishes.</p>  <p>- <link xref="GObject.invalidate"/> and invalidation notifiers allow callbacks to be
  automatically removed when the objects they point to go away.</p>

  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
