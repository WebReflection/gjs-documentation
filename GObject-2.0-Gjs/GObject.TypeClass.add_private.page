<?xml version="1.0"?>
<page id="GObject.TypeClass.add_private"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="GObject.TypeClass" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_type_class_add_private</api:name>
      <api:arg>
        <api:type>gpointer</api:type>
        <api:name>g_class</api:name>
      </api:arg>
      <api:arg>
        <api:type>gsize</api:type>
        <api:name>private_size</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GObject.TypeClass.add_private</title>
  <synopsis><code mime="text/x-gjs">
function add_private(g_class: gpointer, private_size: gsize): void {
    // Gjs wrapper for g_type_class_add_private()
}
  </code></synopsis>
  <p>Registers a private structure for an instantiatable type.</p>  <p>When an object is allocated, the private structures for
the type and all of its parent types are allocated
sequentially in the same memory block as the public
structures.</p>  <p>Note that the accumulated size of the private structures of
a type and all its parent types cannot exceed 64 KiB.</p>  <p>This function should be called in the type's class_init() function.
The private structure can be retrieved using the
G_TYPE_INSTANCE_GET_PRIVATE() macro.</p>  <p>The following example shows attaching a private structure
MyObjectPrivate to an object MyObject defined in the standard
GObject fashion in the type's class_init() function.</p>  <p>Note the use of a structure member "priv" to avoid the overhead
of repeatedly calling MY_OBJECT_GET_PRIVATE().</p>  <p>|[&lt;!-- language="C" --&gt;
typedef struct _MyObject        MyObject;
typedef struct _MyObjectPrivate MyObjectPrivate;</p>  <p>struct _MyObject {
 GObject parent;</p>  <p> MyObjectPrivate *priv;
};</p>  <p>struct _MyObjectPrivate {
  int some_field;
};</p>  <p>static void
my_object_class_init (MyObjectClass *klass)
{
  g_type_class_add_private (klass, sizeof (MyObjectPrivate));
}</p>  <p>static void
my_object_init (MyObject *my_object)
{
  my_object-&gt;priv = G_TYPE_INSTANCE_GET_PRIVATE (my_object,
                                                 MY_TYPE_OBJECT,
                                                 MyObjectPrivate);
}</p>  <p>static int
my_object_get_some_field (MyObject *my_object)
{
  MyObjectPrivate *priv;</p>  <p>  g_return_val_if_fail (MY_IS_OBJECT (my_object), 0);</p>  <p>  priv = my_object-&gt;priv;</p>  <p>  return priv-&gt;some_field;
}
]|</p>
  <p>Since 2.4</p>
<terms>
<item>
<title><code>g_class</code></title>
  <p>class structure for an instantiatable type</p>
</item>
<item>
<title><code>private_size</code></title>
  <p>size of private structure</p>
</item>
</terms>

</page>
