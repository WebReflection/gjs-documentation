<?xml version="1.0"?>
<page id="GObject.type_register_static"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>GType</api:type>
      </api:returns>
      <api:name>g_type_register_static</api:name>
      <api:arg>
        <api:type>GType</api:type>
        <api:name>parent_type</api:name>
      </api:arg>
      <api:arg>
        <api:type>String</api:type>
        <api:name>type_name</api:name>
      </api:arg>
      <api:arg>
        <api:type>GObject.TypeInfo</api:type>
        <api:name>info</api:name>
      </api:arg>
      <api:arg>
        <api:type>GObject.TypeFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>GObject.type_register_static</title>
  <synopsis><code mime="text/x-gjs">
function type_register_static(parent_type: GType, type_name: String, info: GObject.TypeInfo, flags: GObject.TypeFlags): GType {
    // Gjs wrapper for g_type_register_static()
}
  </code></synopsis>
  <p>Registers <code>type_name</code> as the name of a new static type derived from
<code>parent_type</code>. The type system uses the information contained in the
<link xref="GObject.TypeInfo"/> structure pointed to by <code>info</code> to manage the type and its
instances (if not abstract). The value of <code>flags</code> determines the nature
(e.g. abstract or not) of the type.</p>

<terms>
<item>
<title><code>parent_type</code></title>
  <p>type from which this type will be derived</p>
</item>
<item>
<title><code>type_name</code></title>
  <p>0-terminated string used as the name of the new type</p>
</item>
<item>
<title><code>info</code></title>
  <p><link xref="GObject.TypeInfo"/> structure for this type</p>
</item>
<item>
<title><code>flags</code></title>
  <p>bitwise combination of <link xref="GObject.TypeFlags"/> values</p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
