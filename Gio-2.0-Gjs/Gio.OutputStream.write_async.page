<?xml version="1.0"?>
<page id="Gio.OutputStream.write_async"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.OutputStream" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_output_stream_write_async</api:name>
      <api:arg>
        <api:type>ByteArray</api:type>
        <api:name>buffer</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>io_priority</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.AsyncReadyCallback</api:type>
        <api:name>callback</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.OutputStream.prototype.write_async</title>
  <synopsis><code mime="text/x-gjs">
function write_async(buffer: ByteArray, io_priority: Number(gint), cancellable: <link xref="Gio.Cancellable">Gio.Cancellable</link>, callback: <link xref="Gio.AsyncReadyCallback">Gio.AsyncReadyCallback</link>): void {
    // Gjs wrapper for g_output_stream_write_async()
}
  </code></synopsis>
  <p>Request an asynchronous write of <code>count</code> bytes from <code>buffer</code> into
the stream. When the operation is finished <code>callback</code> will be called.
You can then call <link xref="Gio.OutputStream.write_finish"/> to get the result of the
operation.</p>  <p>During an async request no other sync and async calls are allowed,
and will result in <link xref="Gio.IOErrorEnum"/>.pending errors.</p>  <p>A value of <code>count</code> larger than %G_MAXSSIZE will cause a
<link xref="Gio.IOErrorEnum"/>.invalid_argument error.</p>  <p>On success, the number of bytes written will be passed to the
<code>callback</code>. It is not an error if this is not the same as the
requested size, as it can happen e.g. on a partial I/O error,
but generally we try to write as many bytes as requested.</p>  <p>You are guaranteed that this method will never fail with
<link xref="Gio.IOErrorEnum"/>.would_block - if <code>stream</code> can't accept more data, the
method will just wait until this changes.</p>  <p>Any outstanding I/O request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.</p>  <p>The asyncronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.</p>  <p>For the synchronous, blocking version of this function, see
<link xref="Gio.OutputStream.write"/>.</p>  <p>Note that no copy of <code>buffer</code> will be made, so it must stay valid
until <code>callback</code> is called. See <link xref="Gio.OutputStream.write_bytes_async"/>
for a <link xref="GLib.Bytes"/> version that will automatically hold a reference to
the contents (without copying) for the duration of the call.</p>

<terms>
<item>
<title><code>buffer</code></title>
  <p>the buffer containing the data to write.</p>
</item>
<item>
<title><code>io_priority</code></title>
  <p>the io priority of the request.</p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>optional <link xref="Gio.Cancellable"/> object, <code>null</code> to ignore.</p>
</item>
<item>
<title><code>callback</code></title>
  <p>callback to call when the request is satisfied</p>
</item>
</terms>

</page>
