<?xml version="1.0"?>
<page id="Gio.DBusConnection.send_message_with_reply_sync"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.DBusConnection" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Gio.DBusMessage</api:type>
      </api:returns>
      <api:name>g_dbus_connection_send_message_with_reply_sync</api:name>
      <api:arg>
        <api:type>Gio.DBusMessage</api:type>
        <api:name>message</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.DBusSendMessageFlags</api:type>
        <api:name>flags</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number(gint)</api:type>
        <api:name>timeout_msec</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.DBusConnection.prototype.send_message_with_reply_sync</title>
  <synopsis><code mime="text/x-gjs">
function send_message_with_reply_sync(message: <link xref="Gio.DBusMessage">Gio.DBusMessage</link>, flags: <link xref="Gio.DBusSendMessageFlags">Gio.DBusSendMessageFlags</link>, timeout_msec: Number(gint), cancellable: <link xref="Gio.Cancellable">Gio.Cancellable</link>): [return_value: <link xref="Gio.DBusMessage">Gio.DBusMessage</link>, out_serial: Number(guint32)] {
    // Gjs wrapper for g_dbus_connection_send_message_with_reply_sync()
}
  </code></synopsis>
  <p>Synchronously sends <code>message</code> to the peer represented by <code>connection</code>
and blocks the calling thread until a reply is received or the
timeout is reached. See <link xref="Gio.DBusConnection.send_message_with_reply"/>
for the asynchronous version of this method.</p>  <p>Unless <code>flags</code> contain the
<link xref="Gio.DBusSendMessageFlags"/>.preserve_serial flag, the serial number
will be assigned by <code>connection</code> and set on <code>message</code> via
<link xref="Gio.set_serial"/>. If <code>out_serial</code> is not <code>null</code>, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.</p>  <p>If <code>connection</code> is closed then the operation will fail with
<link xref="Gio.IOErrorEnum"/>.closed. If <code>cancellable</code> is canceled, the operation will
fail with <link xref="Gio.IOErrorEnum"/>.cancelled. If <code>message</code> is not well-formed,
the operation fails with <link xref="Gio.IOErrorEnum"/>.invalid_argument.</p>  <p>Note that @error is only set if a local in-process error
occurred. That is to say that the returned <link xref="Gio.DBusMessage"/> object may
be of type <link xref="Gio.DBusMessageType"/>.error. Use
<link xref="Gio.to_gerror"/> to transcode this to a <link xref="GLib.Error"/>.</p>  <p>See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
for an example of how to use this low-level API to send and receive
UNIX file descriptors.</p>  <p>Note that <code>message</code> must be unlocked, unless <code>flags</code> contain the
<link xref="Gio.DBusSendMessageFlags"/>.preserve_serial flag.</p>
  <p>Since 2.26</p>
<terms>
<item>
<title><code>message</code></title>
  <p>a <link xref="Gio.DBusMessage"/></p>
</item>
<item>
<title><code>flags</code></title>
  <p>flags affecting how the message is sent.</p>
</item>
<item>
<title><code>timeout_msec</code></title>
  <p>the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout</p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>a <link xref="Gio.Cancellable"/> or <code>null</code></p>
</item>
<item>
<title><code>return_value</code></title>

</item>
<item>
<title><code>out_serial</code></title>
  <p>return location for serial number
    assigned to <code>message</code> when sending it or <code>null</code></p>
</item>
</terms>

</page>
