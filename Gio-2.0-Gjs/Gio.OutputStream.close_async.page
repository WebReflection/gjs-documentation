<?xml version="1.0"?>
<page id="Gio.OutputStream.close_async"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.OutputStream" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_output_stream_close_async</api:name>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>io_priority</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.AsyncReadyCallback</api:type>
        <api:name>callback</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.OutputStream.prototype.close_async</title>
  <synopsis><code mime="text/x-gjs">
function close_async(io_priority: Number, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback): void {
    // Gjs wrapper for g_output_stream_close_async()
}
  </code></synopsis>
  <p>Requests an asynchronous close of the stream, releasing resources
related to it. When the operation is finished <code>callback</code> will be
called. You can then call <link xref="Gio.close_finish"/> to get
the result of the operation.</p>  <p>For behaviour details see <link xref="Gio.OutputStream.close"/>.</p>  <p>The asyncronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.</p>

<terms>
<item>
<title><code>io_priority</code></title>
  <p>the io priority of the request.</p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>optional cancellable object</p>
</item>
<item>
<title><code>callback</code></title>
  <p>callback to call when the request is satisfied</p>
</item>
</terms>

</page>
