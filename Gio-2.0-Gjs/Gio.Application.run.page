<?xml version="1.0"?>
<page id="Gio.Application.run"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.Application" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Number(gint)</api:type>
      </api:returns>
      <api:name>g_application_run</api:name>
      <api:arg>
        <api:type>Array(String)</api:type>
        <api:name>argv</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.Application.prototype.run</title>
  <synopsis><code mime="text/x-gjs">
function run(argv: Array(String)): Number(gint) {
    // Gjs wrapper for g_application_run()
}
  </code></synopsis>
  <p>Runs the application.</p>  <p>This function is intended to be run from main() and its return value
is intended to be returned by main(). Although you are expected to pass
the <code>argc</code>, <code>argv</code> parameters from main() to this function, it is possible
to pass <code>null</code> if <code>argv</code> is not available or commandline handling is not
required.  Note that on Windows, <code>argc</code> and <code>argv</code> are ignored, and
g_win32_get_command_line() is called internally (for proper support
of Unicode commandline arguments).</p>  <p><link xref="Gio.Application"/> will attempt to parse the commandline arguments.  You
can add commandline flags to the list of recognised options by way of
<link xref="Gio.Application.add_main_option_entries"/>.  After this, the
<link xref="Gio.Application-handle-local-options"/> signal is emitted, from which the
application can inspect the values of its #GOptionEntrys.</p>  <p><link xref="Gio.Application-handle-local-options"/> is a good place to handle options
such as `--version`, where an immediate reply from the local process is
desired (instead of communicating with an already-running instance).
A <link xref="Gio.Application-handle-local-options"/> handler can stop further processing
by returning a non-negative value, which then becomes the exit status of
the process.</p>  <p>What happens next depends on the flags: if
<link xref="Gio.ApplicationFlags"/>.handles_command_line was specified then the remaining
commandline arguments are sent to the primary instance, where a
<link xref="Gio.Application-command-line"/> signal is emitted.  Otherwise, the
remaining commandline arguments are assumed to be a list of files.
If there are no files listed, the application is activated via the
<link xref="Gio.Application-activate"/> signal.  If there are one or more files, and
<link xref="Gio.ApplicationFlags"/>.handles_open was specified then the files are opened
via the <link xref="Gio.Application-open"/> signal.</p>  <p>If you are interested in doing more complicated local handling of the
commandline then you should implement your own <link xref="Gio.Application"/> subclass
and override local_command_line(). In this case, you most likely want
to return <code>true</code> from your local_command_line() implementation to
suppress the default handling. See
[gapplication-example-cmdline2.c][gapplication-example-cmdline2]
for an example.</p>  <p>If, after the above is done, the use count of the application is zero
then the exit status is returned immediately.  If the use count is
non-zero then the default main context is iterated until the use count
falls to zero, at which point 0 is returned.</p>  <p>If the <link xref="Gio.ApplicationFlags"/>.is_service flag is set, then the service will
run for as much as 10 seconds with a use count of zero while waiting
for the message that caused the activation to arrive.  After that,
if the use count falls to zero the application will exit immediately,
except in the case that <link xref="Gio.Application.set_inactivity_timeout"/> is in
use.</p>  <p>This function sets the prgname (<link href="../GLib-2.0/GLib.set_prgname.html">GLib.set_prgname</link>), if not already set,
to the basename of argv[0].  Since 2.38, if <link xref="Gio.ApplicationFlags"/>.is_service
is specified, the prgname is set to the application ID.  The main
impact of this is is that the wmclass of windows created by Gtk+ will
be set accordingly, which helps the window manager determine which
application is showing the window.</p>  <p>Since 2.40, applications that are not explicitly flagged as services
or launchers (ie: neither <link xref="Gio.ApplicationFlags"/>.is_service or
<link xref="Gio.ApplicationFlags"/>.is_launcher are given as flags) will check (from the
default handler for local_command_line) if "--gapplication-service"
was given in the command line.  If this flag is present then normal
commandline processing is interrupted and the
<link xref="Gio.ApplicationFlags"/>.is_service flag is set.  This provides a "compromise"
solution whereby running an application directly from the commandline
will invoke it in the normal way (which can be useful for debugging)
while still allowing applications to be D-Bus activated in service
mode.  The D-Bus service file should invoke the executable with
"--gapplication-service" as the sole commandline argument.  This
approach is suitable for use by most graphical applications but
should not be used from applications like editors that need precise
control over when processes invoked via the commandline will exit and
what their exit status will be.</p>
  <p>Since 2.28</p>
<terms>
<item>
<title><code>argv</code></title>
  <p>the argv from main(), or <code>null</code></p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
