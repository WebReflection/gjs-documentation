<?xml version="1.0"?>
<page id="Gio.File.new_for_commandline_arg"
      type="topic"
      style="function"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.File" group="function" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Gio.File</api:type>
      </api:returns>
      <api:name>g_file_new_for_commandline_arg</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>arg</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.File.new_for_commandline_arg</title>
  <synopsis><code mime="text/x-gjs">
function new_for_commandline_arg(arg: String): Gio.File {
    // Gjs wrapper for g_file_new_for_commandline_arg()
}
  </code></synopsis>
  <p>Creates a <link xref="Gio.File"/> with the given argument from the command line.
The value of <code>arg</code> can be either a URI, an absolute path or a
relative path resolved relative to the current working directory.
This operation never fails, but the returned object might not
support any I/O operation if <code>arg</code> points to a malformed path.</p>  <p>Note that on Windows, this function expects its argument to be in
UTF-8 -- not the system code page.  This means that you
should not use this function with string from argv as it is passed
to main().  g_win32_get_command_line() will return a UTF-8 version of
the commandline.  <link xref="Gio.Application"/> also uses UTF-8 but
<link xref="Gio.ApplicationCommandLine.create_file_for_arg"/> may be more useful
for you there.  It is also always possible to use this function with
<link xref="GLib.OptionContext"/> arguments of type <link xref="GLib.OptionArg"/>.filename.</p>

<terms>
<item>
<title><code>arg</code></title>
  <p>a command line string</p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
