<?xml version="1.0"?>
<page id="Gio.TlsConnection.set_require_close_notify"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.TlsConnection" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_tls_connection_set_require_close_notify</api:name>
      <api:arg>
        <api:type>Boolean</api:type>
        <api:name>require_close_notify</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.TlsConnection.prototype.set_require_close_notify</title>
  <synopsis><code mime="text/x-gjs">
function set_require_close_notify(require_close_notify: Boolean): void {
    // Gjs wrapper for g_tls_connection_set_require_close_notify()
}
  </code></synopsis>
  <p>Sets whether or not <code>conn</code> expects a proper TLS close notification
before the connection is closed. If this is <code>true</code> (the default),
then <code>conn</code> will expect to receive a TLS close notification from its
peer before the connection is closed, and will return a
<link xref="Gio.TlsError"/>.eof error if the connection is closed without proper
notification (since this may indicate a network error, or
man-in-the-middle attack).</p>  <p>In some protocols, the application will know whether or not the
connection was closed cleanly based on application-level data
(because the application-level data includes a length field, or is
somehow self-delimiting); in this case, the close notify is
redundant and sometimes omitted. (TLS 1.1 explicitly allows this;
in TLS 1.0 it is technically an error, but often done anyway.) You
can use <link xref="Gio.TlsConnection.set_require_close_notify"/> to tell <code>conn</code>
to allow an "unannounced" connection close, in which case the close
will show up as a 0-length read, as in a non-TLS
<link xref="Gio.SocketConnection"/>, and it is up to the application to check that
the data has been fully received.</p>  <p>Note that this only affects the behavior when the peer closes the
connection; when the application calls <link xref="Gio.IOStream.close"/> itself
on <code>conn</code>, this will send a close notification regardless of the
setting of this property. If you explicitly want to do an unclean
close, you can close <code>conn</code>'s <link xref="Gio.base-io-stream"/> rather
than closing <code>conn</code> itself.</p>
  <p>Since 2.28</p>
<terms>
<item>
<title><code>require_close_notify</code></title>
  <p>whether or not to require close notification</p>
</item>
</terms>

</page>
