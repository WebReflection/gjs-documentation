<?xml version="1.0"?>
<page id="Gio.File"
      type="guide"
      style="interface"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="interface" type="guide"/>
  </info>
  <title>Gio.File</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let file = new Gio.File();
  </code></synopsis>
  <p><link xref="Gio.File"/> is a high level abstraction for manipulating files on a
virtual file system. #GFiles are lightweight, immutable objects
that do no I/O upon creation. It is necessary to understand that
<link xref="Gio.File"/> objects do not represent files, merely an identifier for a
file. All file content I/O is implemented as streaming operations
(see <link xref="Gio.InputStream"/> and <link xref="Gio.OutputStream"/>).</p>  <p>To construct a <link xref="Gio.File"/>, you can use:
- <link xref="Gio.file_new_for_path"/> if you have a path.
- <link xref="Gio.file_new_for_uri"/> if you have a URI.
- <link xref="Gio.file_new_for_commandline_arg"/> for a command line argument.
- <link xref="Gio.file_new_tmp"/> to create a temporary file from a template.
- <link xref="Gio.file_parse_name"/> from a UTF-8 string gotten from <link xref="Gio.File.get_parse_name"/>.</p>  <p>One way to think of a <link xref="Gio.File"/> is as an abstraction of a pathname. For
normal files the system pathname is what is stored internally, but as
#GFiles are extensible it could also be something else that corresponds
to a pathname in a userspace implementation of a filesystem.</p>  <p>#GFiles make up hierarchies of directories and files that correspond to
the files on a filesystem. You can move through the file system with
<link xref="Gio.File"/> using <link xref="Gio.File.get_parent"/> to get an identifier for the parent
directory, <link xref="Gio.File.get_child"/> to get a child within a directory,
<link xref="Gio.File.resolve_relative_path"/> to resolve a relative path between two
#GFiles. There can be multiple hierarchies, so you may not end up at
the same root if you repeatedly call <link xref="Gio.File.get_parent"/> on two different
files.</p>  <p>All #GFiles have a basename (get with <link xref="Gio.File.get_basename"/>). These names
are byte strings that are used to identify the file on the filesystem
(relative to its parent directory) and there is no guarantees that they
have any particular charset encoding or even make any sense at all. If
you want to use filenames in a user interface you should use the display
name that you can get by requesting the
%G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with <link xref="Gio.File.query_info"/>.
This is guaranteed to be in UTF-8 and can be used in a user interface.
But always store the real basename or the <link xref="Gio.File"/> to use to actually
access the file, because there is no way to go from a display name to
the actual name.</p>  <p>Using <link xref="Gio.File"/> as an identifier has the same weaknesses as using a path
in that there may be multiple aliases for the same file. For instance,
hard or soft links may cause two different #GFiles to refer to the same
file. Other possible causes for aliases are: case insensitive filesystems,
short and long names on FAT/NTFS, or bind mounts in Linux. If you want to
check if two #GFiles point to the same file you can query for the
%G_FILE_ATTRIBUTE_ID_FILE attribute. Note that <link xref="Gio.File"/> does some trivial
canonicalization of pathnames passed in, so that trivial differences in
the path string used at creation (duplicated slashes, slash at end of
path, "." or ".." path segments, etc) does not create different #GFiles.</p>  <p>Many <link xref="Gio.File"/> operations have both synchronous and asynchronous versions
to suit your application. Asynchronous versions of synchronous functions
simply have _async() appended to their function names. The asynchronous
I/O functions call a <link xref="Gio.AsyncReadyCallback"/> which is then used to finalize
the operation, producing a GAsyncResult which is then passed to the
function's matching _finish() operation.</p>  <p>Some <link xref="Gio.File"/> operations do not have synchronous analogs, as they may
take a very long time to finish, and blocking may leave an application
unusable. Notable cases include:
- <link xref="Gio.File.mount_mountable"/> to mount a mountable file.
- <link xref="Gio.File.unmount_mountable_with_operation"/> to unmount a mountable file.
- <link xref="Gio.File.eject_mountable_with_operation"/> to eject a mountable file.</p>  <p>## Entity Tags # {#gfile-etag}</p>  <p>One notable feature of #GFiles are entity tags, or "etags" for
short. Entity tags are somewhat like a more abstract version of the
traditional mtime, and can be used to quickly determine if the file
has been modified from the version on the file system. See the
HTTP 1.1
[specification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)
for HTTP Etag headers, which are a very similar concept.</p>

  <synopsis>
    <title>Prerequisites</title>
    <p>File requires GObject.Object</p>
  </synopsis>
  <synopsis>
    <title>Known Implementations</title>
    <p>None</p>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
