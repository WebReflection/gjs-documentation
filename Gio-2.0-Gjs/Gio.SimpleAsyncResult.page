<?xml version="1.0"?>
<page id="Gio.SimpleAsyncResult"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Gio.SimpleAsyncResult</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let simpleAsyncResult = new Gio.SimpleAsyncResult();
  </code></synopsis>
  <p>As of GLib 2.36, <link xref="Gio.SimpleAsyncResult"/> is deprecated in favor of
<link xref="Gio.Task"/>, which provides a simpler API.</p>  <p><link xref="Gio.SimpleAsyncResult"/> implements <link xref="Gio.AsyncResult"/>.</p>  <p>GSimpleAsyncResult handles #GAsyncReadyCallbacks, error
reporting, operation cancellation and the final state of an operation,
completely transparent to the application. Results can be returned
as a pointer e.g. for functions that return data that is collected
asynchronously, a boolean value for checking the success or failure
of an operation, or a #gssize for operations which return the number
of bytes modified by the operation; all of the simple return cases
are covered.</p>  <p>Most of the time, an application will not need to know of the details
of this API; it is handled transparently, and any necessary operations
are handled by <link xref="Gio.AsyncResult"/>'s interface. However, if implementing a
new GIO module, for writing language bindings, or for complex
applications that need better control of how asynchronous operations
are completed, it is important to understand this functionality.</p>  <p>GSimpleAsyncResults are tagged with the calling function to ensure
that asynchronous functions and their finishing functions are used
together correctly.</p>  <p>To create a new <link xref="Gio.SimpleAsyncResult"/>, call <link xref="Gio.SimpleAsyncResult.new"/>.
If the result needs to be created for a <link xref="GLib.Error"/>, use
<link xref="Gio.SimpleAsyncResult.new_from_error"/> or
<link xref="Gio.SimpleAsyncResult.new_take_error"/>. If a <link xref="GLib.Error"/> is not available
(e.g. the asynchronous operation's doesn't take a <link xref="GLib.Error"/> argument),
but the result still needs to be created for an error condition, use
<link xref="Gio.SimpleAsyncResult.new_error"/> (or <link xref="Gio.SimpleAsyncResult.set_error_va"/>
if your application or binding requires passing a variable argument list
directly), and the error can then be propagated through the use of
<link xref="Gio.SimpleAsyncResult.propagate_error"/>.</p>  <p>An asynchronous operation can be made to ignore a cancellation event by
calling <link xref="Gio.SimpleAsyncResult.set_handle_cancellation"/> with a
<link xref="Gio.SimpleAsyncResult"/> for the operation and <code>false</code>. This is useful for
operations that are dangerous to cancel, such as close (which would
cause a leak if cancelled before being run).</p>  <p>GSimpleAsyncResult can integrate into GLib's event loop, <link xref="GLib.MainLoop"/>,
or it can use #GThreads.
<link xref="Gio.SimpleAsyncResult.complete"/> will finish an I/O task directly
from the point where it is called. <link xref="Gio.SimpleAsyncResult.complete_in_idle"/>
will finish it from an idle handler in the
[thread-default main context][g-main-context-push-thread-default]
. <link xref="Gio.SimpleAsyncResult.run_in_thread"/> will run the
job in a separate thread and then deliver the result to the
thread-default main context.</p>  <p>To set the results of an asynchronous function,
<link xref="Gio.SimpleAsyncResult.set_op_res_gpointer"/>,
<link xref="Gio.SimpleAsyncResult.set_op_res_gboolean"/>, and
<link xref="Gio.SimpleAsyncResult.set_op_res_gssize"/>
are provided, setting the operation's result to a gpointer, gboolean, or
gssize, respectively.</p>  <p>Likewise, to get the result of an asynchronous function,
<link xref="Gio.SimpleAsyncResult.get_op_res_gpointer"/>,
<link xref="Gio.SimpleAsyncResult.get_op_res_gboolean"/>, and
<link xref="Gio.SimpleAsyncResult.get_op_res_gssize"/> are
provided, getting the operation's result as a gpointer, gboolean, and
gssize, respectively.</p>  <p>For the details of the requirements implementations must respect, see
<link xref="Gio.AsyncResult"/>.  A typical implementation of an asynchronous operation
using GSimpleAsyncResult looks something like this:</p>  <p>|[&lt;!-- language="C" --&gt;
static void
baked_cb (Cake    *cake,
          gpointer user_data)
{
  // In this example, this callback is not given a reference to the cake,
  // so the GSimpleAsyncResult has to take a reference to it.
  GSimpleAsyncResult *result = user_data;</p>  <p>  if (cake == NULL)
    g_simple_async_result_set_error (result,
                                     BAKER_ERRORS,
                                     BAKER_ERROR_NO_FLOUR,
                                     "Go to the supermarket");
  else
    g_simple_async_result_set_op_res_gpointer (result,
                                               g_object_ref (cake),
                                               g_object_unref);</p>  <p>
  // In this example, we assume that baked_cb is called as a callback from
  // the mainloop, so it's safe to complete the operation synchronously here.
  // If, however, _baker_prepare_cake () might call its callback without
  // first returning to the mainloop — inadvisable, but some APIs do so —
  // we would need to use <link xref="Gio.SimpleAsyncResult.complete_in_idle"/>.
  g_simple_async_result_complete (result);
  g_object_unref (result);
}</p>  <p>void
baker_bake_cake_async (Baker              *self,
                       guint               radius,
                       GAsyncReadyCallback callback,
                       gpointer            user_data)
{
  GSimpleAsyncResult *simple;
  Cake               *cake;</p>  <p>  if (radius &lt; 3)
    {
      g_simple_async_report_error_in_idle (G_OBJECT (self),
                                           callback,
                                           user_data,
                                           BAKER_ERRORS,
                                           BAKER_ERROR_TOO_SMALL,
                                           "%ucm radius cakes are silly",
                                           radius);
      return;
    }</p>  <p>  simple = g_simple_async_result_new (G_OBJECT (self),
                                      callback,
                                      user_data,
                                      baker_bake_cake_async);
  cake = _baker_get_cached_cake (self, radius);</p>  <p>  if (cake != NULL)
    {
      g_simple_async_result_set_op_res_gpointer (simple,
                                                 g_object_ref (cake),
                                                 g_object_unref);
      g_simple_async_result_complete_in_idle (simple);
      g_object_unref (simple);
      // Drop the reference returned by _baker_get_cached_cake();
      // the GSimpleAsyncResult has taken its own reference.
      g_object_unref (cake);
      return;
    }</p>  <p>  _baker_prepare_cake (self, radius, baked_cb, simple);
}</p>  <p>Cake *
baker_bake_cake_finish (Baker        *self,
                        GAsyncResult *result,
                        GError      **error)
{
  GSimpleAsyncResult *simple;
  Cake               *cake;</p>  <p>  g_return_val_if_fail (g_simple_async_result_is_valid (result,
                                                        G_OBJECT (self),
                                                        baker_bake_cake_async),
                        NULL);</p>  <p>  simple = (GSimpleAsyncResult *) result;</p>  <p>  if (g_simple_async_result_propagate_error (simple, error))
    return NULL;</p>  <p>  cake = CAKE (g_simple_async_result_get_op_res_gpointer (simple));
  return g_object_ref (cake);
}
]|</p>

  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>GObject.Object</code>
      <item>
        <code>Gio.SimpleAsyncResult</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
