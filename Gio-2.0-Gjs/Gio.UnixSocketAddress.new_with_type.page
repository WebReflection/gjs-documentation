<?xml version="1.0"?>
<page id="Gio.UnixSocketAddress.new_with_type"
      type="topic"
      style="constructor"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.UnixSocketAddress" group="constructor" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Gio.SocketAddress</api:type>
      </api:returns>
      <api:name>g_unix_socket_address_new_with_type</api:name>
      <api:arg>
        <api:type>Array(Number(gchar))</api:type>
        <api:name>path</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.UnixSocketAddressType</api:type>
        <api:name>type</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.UnixSocketAddress.new_with_type</title>
  <synopsis><code mime="text/x-gjs">
function new_with_type(path: Array(Number(gchar)), type: <link xref="Gio.UnixSocketAddressType">Gio.UnixSocketAddressType</link>): <link xref="Gio.SocketAddress">Gio.SocketAddress</link> {
    // Gjs wrapper for g_unix_socket_address_new_with_type()
}
  </code></synopsis>
  <p>Creates a new <link xref="Gio.UnixSocketAddress"/> of type <code>type</code> with name <code>path</code>.</p>  <p>If <code>type</code> is <link xref="Gio.UnixSocketAddressType"/>.path, this is equivalent to
calling <link xref="Gio.UnixSocketAddress.new"/>.</p>  <p>If @path_type is <link xref="Gio.UnixSocketAddressType"/>.abstract, then <code>path_len</code>
bytes of <code>path</code> will be copied to the socket's path, and only those
bytes will be considered part of the name. (If <code>path_len</code> is -1,
then <code>path</code> is assumed to be NUL-terminated.) For example, if <code>path</code>
was "test", then calling <link xref="Gio.SocketAddress.get_native_size"/> on the
returned socket would return 7 (2 bytes of overhead, 1 byte for the
abstract-socket indicator byte, and 4 bytes for the name "test").</p>  <p>If @path_type is <link xref="Gio.UnixSocketAddressType"/>.abstract_padded, then
<code>path_len</code> bytes of <code>path</code> will be copied to the socket's path, the
rest of the path will be padded with 0 bytes, and the entire
zero-padded buffer will be considered the name. (As above, if
<code>path_len</code> is -1, then <code>path</code> is assumed to be NUL-terminated.) In
this case, <link xref="Gio.SocketAddress.get_native_size"/> will always return
the full size of a `struct sockaddr_un`, although
<link xref="Gio.UnixSocketAddress.get_path_len"/> will still return just the
length of <code>path</code>.</p>  <p><link xref="Gio.UnixSocketAddressType"/>.abstract is preferred over
<link xref="Gio.UnixSocketAddressType"/>.abstract_padded for new programs. Of course,
when connecting to a server created by another process, you must
use the appropriate type corresponding to how that process created
its listening socket.</p>
  <p>Since 2.26</p>
<terms>
<item>
<title><code>path</code></title>
  <p>the name</p>
</item>
<item>
<title><code>type</code></title>
  <p>a <link xref="Gio.UnixSocketAddressType"/></p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
