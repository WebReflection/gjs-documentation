<?xml version="1.0"?>
<page id="Gio.Initable"
      type="guide"
      style="interface"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="interface" type="guide"/>
  </info>
  <title>Gio.Initable</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let initable = new Gio.Initable();
  </code></synopsis>
  <p><link xref="Gio.Initable"/> is implemented by objects that can fail during
initialization. If an object implements this interface then
it must be initialized as the first thing after construction,
either via <link xref="Gio.init"/> or <link xref="Gio.AsyncInitable.init_async"/>
(the latter is only available if it also implements <link xref="Gio.AsyncInitable"/>).</p>  <p>If the object is not initialized, or initialization returns with an
error, then all operations on the object except <link xref="GObject.ref"/> and
<link xref="GObject.unref"/> are considered to be invalid, and have undefined
behaviour. They will often fail with g_critical() or g_warning(), but
this must not be relied on.</p>  <p>Users of objects implementing this are not intended to use
the interface method directly, instead it will be used automatically
in various ways. For C applications you generally just call
<link xref="Gio.new"/> directly, or indirectly via a foo_thing_new() wrapper.
This will call <link xref="Gio.init"/> under the cover, returning <code>null</code> and
setting a <link xref="GLib.Error"/> on failure (at which point the instance is
unreferenced).</p>  <p>For bindings in languages where the native constructor supports
exceptions the binding could check for objects implemention %GInitable
during normal construction and automatically initialize them, throwing
an exception on failure.</p>
  <p>Since 2.22</p>
  <synopsis>
    <title>Prerequisites</title>
    <p>Initable requires GObject.Object</p>
  </synopsis>
  <synopsis>
    <title>Known Implementations</title>
    <p>%s is implemented by CharsetConverter,DBusConnection,DBusObjectManagerClient,DBusProxy,DBusServer,InetAddressMask,Socket and Subprocess</p>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
