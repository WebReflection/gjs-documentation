<?xml version="1.0"?>
<page id="Gio.DBusConnection.register_object"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.DBusConnection" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>Number(guint)</api:type>
      </api:returns>
      <api:name>g_dbus_connection_register_object</api:name>
      <api:arg>
        <api:type>String</api:type>
        <api:name>object_path</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.DBusInterfaceInfo</api:type>
        <api:name>interface_info</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.DBusInterfaceVTable</api:type>
        <api:name>vtable</api:name>
      </api:arg>
      <api:arg>
        <api:type>void</api:type>
        <api:name>user_data</api:name>
      </api:arg>
      <api:arg>
        <api:type>GLib.DestroyNotify</api:type>
        <api:name>user_data_free_func</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.DBusConnection.prototype.register_object</title>
  <synopsis><code mime="text/x-gjs">
function register_object(object_path: String, interface_info: <link xref="Gio.DBusInterfaceInfo">Gio.DBusInterfaceInfo</link>, vtable: <link xref="Gio.DBusInterfaceVTable">Gio.DBusInterfaceVTable</link>, user_data: void, user_data_free_func: <link href="../GLib-2.0/GLib.DestroyNotify.page">GLib.DestroyNotify</link>): Number(guint) {
    // Gjs wrapper for g_dbus_connection_register_object()
}
  </code></synopsis>
  <p>Registers callbacks for exported objects at <code>object_path</code> with the
D-Bus interface that is described in <code>interface_info</code>.</p>  <p>Calls to functions in <code>vtable</code> (and <code>user_data_free_func</code>) will happen
in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from.</p>  <p>Note that all <link xref="GLib.Variant"/> values passed to functions in <code>vtable</code> will match
the signature given in <code>interface_info</code> - if a remote caller passes
incorrect values, the `org.freedesktop.DBus.Error.InvalidArgs`
is returned to the remote caller.</p>  <p>Additionally, if the remote caller attempts to invoke methods or
access properties not mentioned in <code>interface_info</code> the
`org.freedesktop.DBus.Error.UnknownMethod` resp.
`org.freedesktop.DBus.Error.InvalidArgs` errors
are returned to the caller.</p>  <p>It is considered a programming error if the
<link xref="Gio.DBusInterfaceGetPropertyFunc"/> function in <code>vtable</code> returns a
<link xref="GLib.Variant"/> of incorrect type.</p>  <p>If an existing callback is already registered at <code>object_path</code> and
@interface_name, then @error is set to #G_IO_ERROR_EXISTS.</p>  <p>GDBus automatically implements the standard D-Bus interfaces
org.freedesktop.DBus.Properties, org.freedesktop.DBus.Introspectable
and org.freedesktop.Peer, so you don't have to implement those for the
objects you export. You can implement org.freedesktop.DBus.Properties
yourself, e.g. to handle getting and setting of properties asynchronously.</p>  <p>Note that the reference count on <code>interface_info</code> will be
incremented by 1 (unless allocated statically, e.g. if the
reference count is -1, see <link xref="Gio.ref"/>) for as long
as the object is exported. Also note that <code>vtable</code> will be copied.</p>  <p>See this [server][gdbus-server] for an example of how to use this method.</p>
  <p>Since 2.26</p>
<terms>
<item>
<title><code>object_path</code></title>
  <p>the object path to register at</p>
</item>
<item>
<title><code>interface_info</code></title>
  <p>introspection data for the interface</p>
</item>
<item>
<title><code>vtable</code></title>
  <p>a <link xref="Gio.DBusInterfaceVTable"/> to call into or <code>null</code></p>
</item>
<item>
<title><code>user_data</code></title>
  <p>data to pass to functions in <code>vtable</code></p>
</item>
<item>
<title><code>user_data_free_func</code></title>
  <p>function to call when the object path is unregistered</p>
</item>
<item>
<title><code>Returns</code></title>

</item>
</terms>

</page>
