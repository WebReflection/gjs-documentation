<?xml version="1.0"?>
<page id="Gio.AsyncResult"
      type="guide"
      style="interface"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="interface" type="guide"/>
  </info>
  <title>Gio.AsyncResult</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let async_result = new Gio.AsyncResult();
  </code></synopsis>
  <p>Provides a base class for implementing asynchronous function results.</p>  <p>Asynchronous operations are broken up into two separate operations
which are chained together by a <link xref="Gio.AsyncReadyCallback"/>. To begin
an asynchronous operation, provide a <link xref="Gio.AsyncReadyCallback"/> to the
asynchronous function. This callback will be triggered when the
operation has completed, and will be passed a <link xref="Gio.AsyncResult"/> instance
filled with the details of the operation's success or failure, the
object the asynchronous function was started for and any error codes
returned. The asynchronous callback function is then expected to call
the corresponding "_finish()" function, passing the object the
function was called for, the <link xref="Gio.AsyncResult"/> instance, and (optionally)
an @error to grab any error conditions that may have occurred.</p>  <p>The "_finish()" function for an operation takes the generic result
(of type <link xref="Gio.AsyncResult"/>) and returns the specific result that the
operation in question yields (e.g. a <link xref="Gio.FileEnumerator"/> for a
"enumerate children" operation). If the result or error status of the
operation is not needed, there is no need to call the "_finish()"
function; GIO will take care of cleaning up the result and error
information after the <link xref="Gio.AsyncReadyCallback"/> returns. You can pass
<code>null</code> for the <link xref="Gio.AsyncReadyCallback"/> if you don't need to take any
action at all after the operation completes. Applications may also
take a reference to the <link xref="Gio.AsyncResult"/> and call "_finish()" later;
however, the "_finish()" function may be called at most once.</p>  <p>Example of a typical asynchronous operation flow:
|[&lt;!-- language="C" --&gt;
void _theoretical_frobnitz_async (Theoretical         *t,
                                  GCancellable        *c,
                                  GAsyncReadyCallback  cb,
                                  gpointer             u);</p>  <p>gboolean _theoretical_frobnitz_finish (Theoretical   *t,
                                       GAsyncResult  *res,
                                       GError       **e);</p>  <p>static void
frobnitz_result_func (GObject      *source_object,
		 GAsyncResult *res,
		 gpointer      user_data)
{
  gboolean success = FALSE;</p>  <p>  success = _theoretical_frobnitz_finish (source_object, res, NULL);</p>  <p>  if (success)
    g_printf ("Hurray!\n");
  else
    g_printf ("Uh oh!\n");</p>  <p>  ...</p>  <p>}</p>  <p>int main (int argc, void *argv[])
{
   ...</p>  <p>   _theoretical_frobnitz_async (theoretical_data,
                                NULL,
                                frobnitz_result_func,
                                NULL);</p>  <p>   ...
}
]|</p>  <p>The callback for an asynchronous operation is called only once, and is
always called, even in the case of a cancelled operation. On cancellation
the result is a <link xref="Gio.IOErrorEnum"/>.cancelled error.</p>  <p>## I/O Priority # {#io-priority}</p>  <p>Many I/O-related asynchronous operations have a priority parameter,
which is used in certain cases to determine the order in which
operations are executed. They are not used to determine system-wide
I/O scheduling. Priorities are integers, with lower numbers indicating
higher priority. It is recommended to choose priorities between
%G_PRIORITY_LOW and %G_PRIORITY_HIGH, with %G_PRIORITY_DEFAULT
as a default.</p>

  <synopsis>
    <title>Prerequisites</title>
    <p>AsyncResult requires GObject.Object</p>
  </synopsis>
  <synopsis>
    <title>Known Implementations</title>
    <p>AsyncResult is implemented by SimpleAsyncResult and Task</p>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
