<?xml version="1.0"?>
<page id="Gio.AppInfo"
      type="guide"
      style="interface"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="interface" type="guide"/>
  </info>
  <title>Gio.AppInfo</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let app_info = new Gio.AppInfo();
  </code></synopsis>
  <p><link xref="Gio.AppInfo"/> and <link xref="Gio.AppLaunchContext"/> are used for describing and launching
applications installed on the system.</p>  <p>As of GLib 2.20, URIs will always be converted to POSIX paths
(using <link xref="Gio.get_path"/>) when using <link xref="Gio.launch"/> even if
the application requested an URI and not a POSIX path. For example
for an desktop-file based application with Exec key `totem
\%U` and a single URI, `sftp://foo/file.avi`, then
`/home/user/.gvfs/sftp on foo/file.avi` will be passed. This will
only work if a set of suitable GIO extensions (such as gvfs 2.26
compiled with FUSE support), is available and operational; if this
is not the case, the URI will be passed unmodified to the application.
Some URIs, such as `mailto:`, of course cannot be mapped to a POSIX
path (in gvfs there's no FUSE mount for it); such URIs will be
passed unmodified to the application.</p>  <p>Specifically for gvfs 2.26 and later, the POSIX URI will be mapped
back to the GIO URI in the <link xref="Gio.File"/> constructors (since gvfs
implements the <link xref="Gio.Vfs"/> extension point). As such, if the application
needs to examine the URI, it needs to use <link xref="Gio.get_uri"/> or
similar on <link xref="Gio.File"/>. In other words, an application cannot assume
that the URI passed to e.g. <link xref="Gio.file_new_for_commandline_arg"/> is
equal to the result of <link xref="Gio.get_uri"/>. The following snippet
illustrates this:</p>  <p>|[
GFile *f;
char *uri;</p>  <p>file = g_file_new_for_commandline_arg (uri_from_commandline);</p>  <p>uri = g_file_get_uri (file);
strcmp (uri, uri_from_commandline) == 0;
g_free (uri);</p>  <p>if (g_file_has_uri_scheme (file, "cdda"))
  {
    // do something special with uri
  }
g_object_unref (file);
]|</p>  <p>This code will work when both `cdda://sr0/Track 1.wav` and
`/home/user/.gvfs/cdda on sr0/Track 1.wav` is passed to the
application. It should be noted that it's generally not safe
for applications to rely on the format of a particular URIs.
Different launcher applications (e.g. file managers) may have
different ideas of what a given URI means.</p>

  <synopsis>
    <title>Prerequisites</title>
    <p>AppInfo requires GObject.Object</p>
  </synopsis>
  <synopsis>
    <title>Known Implementations</title>
    <p>%s is implemented by DesktopAppInfo</p>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
