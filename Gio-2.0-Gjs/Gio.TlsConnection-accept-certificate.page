<?xml version="1.0"?>
<page id="Gio.TlsConnection-accept-certificate"
      type="topic"
      style="signal"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.TlsConnection" group="signal" type="guide"/>
    <title type="link" role="topic">accept-certificate</title>
  </info>
  <title>Gio.TlsConnection::accept-certificate</title>
  <synopsis><code mime="text/x-gjs">
connect('accept-certificate', function (tlsConnection, peer_cert: <link xref="Gio.TlsCertificate">Gio.TlsCertificate</link>, errors: <link xref="Gio.TlsCertificateFlags">Gio.TlsCertificateFlags</link>, ): Boolean);
  </code></synopsis>
  <p>Emitted during the TLS handshake after the peer certificate has
been received. You can examine <code>peer_cert</code>'s certification path by
calling <link xref="Gio.TlsCertificate.get_issuer"/> on it.</p>  <p>For a client-side connection, <code>peer_cert</code> is the server's
certificate, and the signal will only be emitted if the
certificate was not acceptable according to @conn's
#GTlsClientConnection:validation_flags. If you would like the
certificate to be accepted despite <code>errors</code>, return <code>true</code> from the
signal handler. Otherwise, if no handler accepts the certificate,
the handshake will fail with <link xref="Gio.TlsError"/>.bad_certificate.</p>  <p>For a server-side connection, <code>peer_cert</code> is the certificate
presented by the client, if this was requested via the server's
#GTlsServerConnection:authentication_mode. On the server side,
the signal is always emitted when the client presents a
certificate, and the certificate will only be accepted if a
handler returns <code>true</code>.</p>  <p>Note that if this signal is emitted as part of asynchronous I/O
in the main thread, then you should not attempt to interact with
the user before returning from the signal handler. If you want to
let the user decide whether or not to accept the certificate, you
would have to return <code>false</code> from the signal handler on the first
attempt, and then after the connection attempt returns a
<link xref="Gio.TlsError"/>.handshake, you can interact with the user, and if
the user decides to accept the certificate, remember that fact,
create a new connection, and return <code>true</code> from the signal handler
the next time.</p>  <p>If you are doing I/O in another thread, you do not
need to worry about this, and can simply block in the signal
handler until the UI thread returns an answer.</p>
  <p>Since 2.28</p>
<terms>
<item>
<title><code>tlsConnection</code></title>
<p>instance of <link xref="Gio.TlsConnection"/> that is emitting the signal</p>
</item>
<item>
<title><code>peer_cert</code></title>
  <p>the peer's <link xref="Gio.TlsCertificate"/></p>
</item>
<item>
<title><code>errors</code></title>
  <p>the problems with <code>peer_cert</code>.</p>
</item>
<item>
<title><code>Returns</code></title>
  <p><code>true</code> to accept <code>peer_cert</code> (which will also
immediately end the signal emission). <code>false</code> to allow the signal
emission to continue, which will cause the handshake to fail if
no one else overrides it.</p>
</item>
</terms>

</page>
