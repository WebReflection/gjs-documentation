<?xml version="1.0"?>
<page id="Gio.File-replace"
      type="topic"
      style="vfunc"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.File" group="vfunc" type="guide"/>
  </info>
  <title>Gio.File::replace</title>
  <synopsis><code mime="text/x-gjs">
function vfunc_replace(etag: String, make_backup: Boolean, flags: <link xref="Gio.FileCreateFlags">Gio.FileCreateFlags</link>, cancellable: <link xref="Gio.Cancellable">Gio.Cancellable</link>): <link xref="Gio.FileOutputStream">Gio.FileOutputStream</link> {
}
  </code></synopsis>
  <p>Returns an output stream for overwriting the file, possibly
creating a backup copy of the file first. If the file doesn't exist,
it will be created.</p>  <p>This will try to replace the file in the safest way possible so
that any errors during the writing will not affect an already
existing copy of the file. For instance, for local files it
may write to a temporary file and then atomically rename over
the destination when the stream is closed.</p>  <p>By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in <code>flags</code> the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.</p>  <p>If <code>cancellable</code> is not <code>null</code>, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error <link xref="Gio.IOErrorEnum"/>.cancelled will be
returned.</p>  <p>If you pass in a non-<code>null</code> <code>etag</code> value, then this value is
compared to the current entity tag of the file, and if they differ
an <link xref="Gio.IOErrorEnum"/>.wrong_etag error is returned. This generally means
that the file has been changed since you last read it. You can get
the new etag from <link xref="Gio.FileOutputStream.get_etag"/> after you've
finished writing and closed the <link xref="Gio.FileOutputStream"/>. When you load
a new file you can use <link xref="Gio.FileInputStream.query_info"/> to get
the etag of the file.</p>  <p>If <code>make_backup</code> is <code>true</code>, this function will attempt to make a
backup of the current file before overwriting it. If this fails
a <link xref="Gio.IOErrorEnum"/>.cant_create_backup error will be returned. If you
want to replace anyway, try again with <code>make_backup</code> set to <code>false</code>.</p>  <p>If the file is a directory the <link xref="Gio.IOErrorEnum"/>.is_directory error will
be returned, and if the file is some other form of non-regular file
then a <link xref="Gio.IOErrorEnum"/>.not_regular_file error will be returned. Some
file systems don't allow all file names, and may return an
<link xref="Gio.IOErrorEnum"/>.invalid_filename error, and if the name is to long
<link xref="Gio.IOErrorEnum"/>.filename_too_long will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.</p>

<terms>
<item>
<title><code>etag</code></title>
  <p>an optional [entity tag][gfile-etag]
    for the current <link xref="Gio.File"/>, or #NULL to ignore</p>
</item>
<item>
<title><code>make_backup</code></title>
  <p><code>true</code> if a backup should be created</p>
</item>
<item>
<title><code>flags</code></title>
  <p>a set of <link xref="Gio.FileCreateFlags"/></p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>optional <link xref="Gio.Cancellable"/> object,
    <code>null</code> to ignore</p>
</item>
<item>
<title><code>Returns</code></title>
  <p>a <link xref="Gio.FileOutputStream"/> or <code>null</code> on error.
    Free the returned object with <link xref="GObject.Object.unref"/>.</p>
</item>
</terms>

</page>
