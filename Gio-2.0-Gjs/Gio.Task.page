<?xml version="1.0"?>
<page id="Gio.Task"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Gio.Task</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let task = new Gio.Task();
  </code></synopsis>
  <p>A <link xref="Gio.Task"/> represents and manages a cancellable "task".</p>  <p>## Asynchronous operations</p>  <p>The most common usage of <link xref="Gio.Task"/> is as a <link xref="Gio.AsyncResult"/>, to
manage data during an asynchronous operation. You call
<link xref="Gio.Task.new"/> in the "start" method, followed by
<link xref="Gio.Task.set_task_data"/> and the like if you need to keep some
additional data associated with the task, and then pass the
task object around through your asynchronous operation.
Eventually, you will call a method such as
<link xref="Gio.Task.return_pointer"/> or <link xref="Gio.Task.return_error"/>, which will
save the value you give it and then invoke the task's callback
function (waiting until the next iteration of the main
loop first, if necessary). The caller will pass the <link xref="Gio.Task"/> back
to the operation's finish function (as a <link xref="Gio.AsyncResult"/>), and
you can use <link xref="Gio.Task.propagate_pointer"/> or the like to extract
the return value.</p>  <p>Here is an example for using GTask as a GAsyncResult:
|[&lt;!-- language="C" --&gt;
    typedef struct {
      CakeFrostingType frosting;
      char *message;
    } DecorationData;</p>  <p>    static void
    decoration_data_free (DecorationData *decoration)
    {
      g_free (decoration-&gt;message);
      g_slice_free (DecorationData, decoration);
    }</p>  <p>    static void
    baked_cb (Cake     *cake,
              gpointer  user_data)
    {
      GTask *task = user_data;
      DecorationData *decoration = g_task_get_task_data (task);
      GError *error = NULL;</p>  <p>      if (cake == NULL)
        {
          g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
                                   "Go to the supermarket");
          g_object_unref (task);
          return;
        }</p>  <p>      if (!cake_decorate (cake, decoration-&gt;frosting, decoration-&gt;message, &amp;error))
        {
          g_object_unref (cake);
          // <link xref="Gio.Task.return_error"/> takes ownership of error
          g_task_return_error (task, error);
          g_object_unref (task);
          return;
        }</p>  <p>      g_task_return_pointer (task, cake, g_object_unref);
      g_object_unref (task);
    }</p>  <p>    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      GTask *task;
      DecorationData *decoration;
      Cake  *cake;</p>  <p>      task = g_task_new (self, cancellable, callback, user_data);
      if (radius &lt; 3)
        {
          g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_TOO_SMALL,
                                   "%ucm radius cakes are silly",
                                   radius);
          g_object_unref (task);
          return;
        }</p>  <p>      cake = _baker_get_cached_cake (self, radius, flavor, frosting, message);
      if (cake != NULL)
        {
          // _baker_get_cached_cake() returns a reffed cake
          g_task_return_pointer (task, cake, g_object_unref);
          g_object_unref (task);
          return;
        }</p>  <p>      decoration = g_slice_new (DecorationData);
      decoration-&gt;frosting = frosting;
      decoration-&gt;message = g_strdup (message);
      g_task_set_task_data (task, decoration, (GDestroyNotify) decoration_data_free);</p>  <p>      _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
    }</p>  <p>    Cake *
    baker_bake_cake_finish (Baker         *self,
                            GAsyncResult  *result,
                            GError       **error)
    {
      g_return_val_if_fail (g_task_is_valid (result, self), NULL);</p>  <p>      return g_task_propagate_pointer (G_TASK (result), error);
    }
]|</p>  <p>## Chained asynchronous operations</p>  <p><link xref="Gio.Task"/> also tries to simplify asynchronous operations that
internally chain together several smaller asynchronous
operations. <link xref="Gio.Task.get_cancellable"/>, <link xref="Gio.Task.get_context"/>,
and <link xref="Gio.Task.get_priority"/> allow you to get back the task's
<link xref="Gio.Cancellable"/>, <link href="../GLib-2.0/GLib.MainContext.html">GLib.MainContext</link>, and [I/O priority][io-priority]
when starting a new subtask, so you don't have to keep track
of them yourself. <link xref="Gio.Task.attach_source"/> simplifies the case
of waiting for a source to fire (automatically using the correct
<link href="../GLib-2.0/GLib.MainContext.html">GLib.MainContext</link> and priority).</p>  <p>Here is an example for chained asynchronous operations:
  |[&lt;!-- language="C" --&gt;
    typedef struct {
      Cake *cake;
      CakeFrostingType frosting;
      char *message;
    } BakingData;</p>  <p>    static void
    decoration_data_free (BakingData *bd)
    {
      if (bd-&gt;cake)
        g_object_unref (bd-&gt;cake);
      g_free (bd-&gt;message);
      g_slice_free (BakingData, bd);
    }</p>  <p>    static void
    decorated_cb (Cake         *cake,
                  GAsyncResult *result,
                  gpointer      user_data)
    {
      GTask *task = user_data;
      GError *error = NULL;</p>  <p>      if (!cake_decorate_finish (cake, result, &amp;error))
        {
          g_object_unref (cake);
          g_task_return_error (task, error);
          g_object_unref (task);
          return;
        }</p>  <p>      // baking_data_free() will drop its ref on the cake, so we have to
      // take another here to give to the caller.
      g_task_return_pointer (result, g_object_ref (cake), g_object_unref);
      g_object_unref (task);
    }</p>  <p>    static void
    decorator_ready (gpointer user_data)
    {
      GTask *task = user_data;
      BakingData *bd = g_task_get_task_data (task);</p>  <p>      cake_decorate_async (bd-&gt;cake, bd-&gt;frosting, bd-&gt;message,
                           g_task_get_cancellable (task),
                           decorated_cb, task);
    }</p>  <p>    static void
    baked_cb (Cake     *cake,
              gpointer  user_data)
    {
      GTask *task = user_data;
      BakingData *bd = g_task_get_task_data (task);
      GError *error = NULL;</p>  <p>      if (cake == NULL)
        {
          g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
                                   "Go to the supermarket");
          g_object_unref (task);
          return;
        }</p>  <p>      bd-&gt;cake = cake;</p>  <p>      // Bail out now if the user has already cancelled
      if (g_task_return_error_if_cancelled (task))
        {
          g_object_unref (task);
          return;
        }</p>  <p>      if (cake_decorator_available (cake))
        decorator_ready (task);
      else
        {
          GSource *source;</p>  <p>          source = cake_decorator_wait_source_new (cake);
          // Attach @source to @task's GMainContext and have it call
          // decorator_ready() when it is ready.
          g_task_attach_source (task, source,
                                G_CALLBACK (decorator_ready));
          g_source_unref (source);
        }
    }</p>  <p>    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           gint                 priority,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      GTask *task;
      BakingData *bd;</p>  <p>      task = g_task_new (self, cancellable, callback, user_data);
      g_task_set_priority (task, priority);</p>  <p>      bd = g_slice_new0 (BakingData);
      bd-&gt;frosting = frosting;
      bd-&gt;message = g_strdup (message);
      g_task_set_task_data (task, bd, (GDestroyNotify) baking_data_free);</p>  <p>      _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
    }</p>  <p>    Cake *
    baker_bake_cake_finish (Baker         *self,
                            GAsyncResult  *result,
                            GError       **error)
    {
      g_return_val_if_fail (g_task_is_valid (result, self), NULL);</p>  <p>      return g_task_propagate_pointer (G_TASK (result), error);
    }
]|</p>  <p>## Asynchronous operations from synchronous ones</p>  <p>You can use <link xref="Gio.Task.run_in_thread"/> to turn a synchronous
operation into an asynchronous one, by running it in a thread
which will then dispatch the result back to the caller's
<link href="../GLib-2.0/GLib.MainContext.html">GLib.MainContext</link> when it completes.</p>  <p>Running a task in a thread:
  |[&lt;!-- language="C" --&gt;
    typedef struct {
      guint radius;
      CakeFlavor flavor;
      CakeFrostingType frosting;
      char *message;
    } CakeData;</p>  <p>    static void
    cake_data_free (CakeData *cake_data)
    {
      g_free (cake_data-&gt;message);
      g_slice_free (CakeData, cake_data);
    }</p>  <p>    static void
    bake_cake_thread (GTask         *task,
                      gpointer       source_object,
                      gpointer       task_data,
                      GCancellable  *cancellable)
    {
      Baker *self = source_object;
      CakeData *cake_data = task_data;
      Cake *cake;
      GError *error = NULL;</p>  <p>      cake = bake_cake (baker, cake_data-&gt;radius, cake_data-&gt;flavor,
                        cake_data-&gt;frosting, cake_data-&gt;message,
                        cancellable, &amp;error);
      if (cake)
        g_task_return_pointer (task, cake, g_object_unref);
      else
        g_task_return_error (task, error);
    }</p>  <p>    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      CakeData *cake_data;
      GTask *task;</p>  <p>      cake_data = g_slice_new (CakeData);
      cake_data-&gt;radius = radius;
      cake_data-&gt;flavor = flavor;
      cake_data-&gt;frosting = frosting;
      cake_data-&gt;message = g_strdup (message);
      task = g_task_new (self, cancellable, callback, user_data);
      g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
      g_task_run_in_thread (task, bake_cake_thread);
    }</p>  <p>    Cake *
    baker_bake_cake_finish (Baker         *self,
                            GAsyncResult  *result,
                            GError       **error)
    {
      g_return_val_if_fail (g_task_is_valid (result, self), NULL);</p>  <p>      return g_task_propagate_pointer (G_TASK (result), error);
    }
]|</p>  <p>## Adding cancellability to uncancellable tasks</p>  <p>Finally, <link xref="Gio.Task.run_in_thread"/> and <link xref="Gio.Task.run_in_thread_sync"/>
can be used to turn an uncancellable operation into a
cancellable one. If you call <link xref="Gio.Task.set_return_on_cancel"/>,
passing <code>true</code>, then if the task's <link xref="Gio.Cancellable"/> is cancelled,
it will return control back to the caller immediately, while
allowing the task thread to continue running in the background
(and simply discarding its result when it finally does finish).
Provided that the task thread is careful about how it uses
locks and other externally-visible resources, this allows you
to make "GLib-friendly" asynchronous and cancellable
synchronous variants of blocking APIs.</p>  <p>Cancelling a task:
  |[&lt;!-- language="C" --&gt;
    static void
    bake_cake_thread (GTask         *task,
                      gpointer       source_object,
                      gpointer       task_data,
                      GCancellable  *cancellable)
    {
      Baker *self = source_object;
      CakeData *cake_data = task_data;
      Cake *cake;
      GError *error = NULL;</p>  <p>      cake = bake_cake (baker, cake_data-&gt;radius, cake_data-&gt;flavor,
                        cake_data-&gt;frosting, cake_data-&gt;message,
                        &amp;error);
      if (error)
        {
          g_task_return_error (task, error);
          return;
        }</p>  <p>      // If the task has already been cancelled, then we don't want to add
      // the cake to the cake cache. Likewise, we don't  want to have the
      // task get cancelled in the middle of updating the cache.
      // <link xref="Gio.Task.set_return_on_cancel"/> will return <code>true</code> here if it managed
      // to disable return-on-cancel, or <code>false</code> if the task was cancelled
      // before it could.
      if (g_task_set_return_on_cancel (task, FALSE))
        {
          // If the caller cancels at this point, their
          // GAsyncReadyCallback won't be invoked until we return,
          // so we don't have to worry that this code will run at
          // the same time as that code does. But if there were
          // other functions that might look at the cake cache,
          // then we'd probably need a GMutex here as well.
          baker_add_cake_to_cache (baker, cake);
          g_task_return_pointer (task, cake, g_object_unref);
        }
    }</p>  <p>    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      CakeData *cake_data;
      GTask *task;</p>  <p>      cake_data = g_slice_new (CakeData);</p>  <p>      ...</p>  <p>      task = g_task_new (self, cancellable, callback, user_data);
      g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
      g_task_set_return_on_cancel (task, TRUE);
      g_task_run_in_thread (task, bake_cake_thread);
    }</p>  <p>    Cake *
    baker_bake_cake_sync (Baker               *self,
                          guint                radius,
                          CakeFlavor           flavor,
                          CakeFrostingType     frosting,
                          const char          *message,
                          GCancellable        *cancellable,
                          GError             **error)
    {
      CakeData *cake_data;
      GTask *task;
      Cake *cake;</p>  <p>      cake_data = g_slice_new (CakeData);</p>  <p>      ...</p>  <p>      task = g_task_new (self, cancellable, NULL, NULL);
      g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
      g_task_set_return_on_cancel (task, TRUE);
      g_task_run_in_thread_sync (task, bake_cake_thread);</p>  <p>      cake = g_task_propagate_pointer (task, error);
      g_object_unref (task);
      return cake;
    }
]|</p>  <p>## Porting from GSimpleAsyncResult</p>  <p><link xref="Gio.Task"/>'s API attempts to be simpler than <link xref="Gio.SimpleAsyncResult"/>'s
in several ways:
- You can save task-specific data with <link xref="Gio.Task.set_task_data"/>, and
  retrieve it later with <link xref="Gio.Task.get_task_data"/>. This replaces the
  abuse of <link xref="Gio.SimpleAsyncResult.set_op_res_gpointer"/> for the same
  purpose with <link xref="Gio.SimpleAsyncResult"/>.
- In addition to the task data, <link xref="Gio.Task"/> also keeps track of the
  [priority][io-priority], <link xref="Gio.Cancellable"/>, and
  <link href="../GLib-2.0/GLib.MainContext.html">GLib.MainContext</link> associated with the task, so tasks that consist of
  a chain of simpler asynchronous operations will have easy access
  to those values when starting each sub-task.
- <link xref="Gio.Task.return_error_if_cancelled"/> provides simplified
  handling for cancellation. In addition, cancellation
  overrides any other <link xref="Gio.Task"/> return value by default, like
  <link xref="Gio.SimpleAsyncResult"/> does when
  <link xref="Gio.SimpleAsyncResult.set_check_cancellable"/> is called.
  (You can use <link xref="Gio.Task.set_check_cancellable"/> to turn off that
  behavior.) On the other hand, <link xref="Gio.Task.run_in_thread"/>
  guarantees that it will always run your
  `task_func`, even if the task's <link xref="Gio.Cancellable"/>
  is already cancelled before the task gets a chance to run;
  you can start your `task_func` with a
  <link xref="Gio.Task.return_error_if_cancelled"/> check if you need the
  old behavior.
- The "return" methods (eg, <link xref="Gio.Task.return_pointer"/>)
  automatically cause the task to be "completed" as well, and
  there is no need to worry about the "complete" vs "complete
  in idle" distinction. (<link xref="Gio.Task"/> automatically figures out
  whether the task's callback can be invoked directly, or
  if it needs to be sent to another <link href="../GLib-2.0/GLib.MainContext.html">GLib.MainContext</link>, or delayed
  until the next iteration of the current <link href="../GLib-2.0/GLib.MainContext.html">GLib.MainContext</link>.)
- The "finish" functions for <link xref="Gio.Task"/>-based operations are generally
  much simpler than <link xref="Gio.SimpleAsyncResult"/> ones, normally consisting
  of only a single call to <link xref="Gio.Task.propagate_pointer"/> or the like.
  Since <link xref="Gio.Task.propagate_pointer"/> "steals" the return value from
  the <link xref="Gio.Task"/>, it is not necessary to juggle pointers around to
  prevent it from being freed twice.
- With <link xref="Gio.SimpleAsyncResult"/>, it was common to call
  <link xref="Gio.SimpleAsyncResult.propagate_error"/> from the
  `_finish()` wrapper function, and have
  virtual method implementations only deal with successful
  returns. This behavior is deprecated, because it makes it
  difficult for a subclass to chain to a parent class's async
  methods. Instead, the wrapper function should just be a
  simple wrapper, and the virtual method should call an
  appropriate `g_task_propagate_` function.
  Note that wrapper methods can now use
  <link xref="Gio.AsyncResult.legacy_propagate_error"/> to do old-style
  <link xref="Gio.SimpleAsyncResult"/> error-returning behavior, and
  <link xref="Gio.AsyncResult.is_tagged"/> to check if a result is tagged as
  having come from the `_async()` wrapper
  function (for "short-circuit" results, such as when passing
  0 to <link xref="Gio.InputStream.read_async"/>).</p>

  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>GObject.Object</code>
      <item>
        <code>Gio.Task</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
