<?xml version="1.0"?>
<page id="Gio.Cancellable-cancelled"
      type="topic"
      style="signal"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.Cancellable" group="signal" type="guide"/>
    <title type="link" role="topic">cancelled</title>
  </info>
  <title>Gio.Cancellable::cancelled</title>
  <synopsis><code mime="text/x-gjs">
connect('cancelled', function (cancellable, ): void);
  </code></synopsis>
  <p>Emitted when the operation has been cancelled.</p>  <p>Can be used by implementations of cancellable operations. If the
operation is cancelled from another thread, the signal will be
emitted in the thread that cancelled the operation, not the
thread that is running the operation.</p>  <p>Note that disconnecting from this signal (or any signal) in a
multi-threaded program is prone to race conditions. For instance
it is possible that a signal handler may be invoked even after
a call to <link xref="GObject.signal_handler_disconnect"/> for that handler has
already returned.</p>  <p>There is also a problem when cancellation happens right before
connecting to the signal. If this happens the signal will
unexpectedly not be emitted, and checking before connecting to
the signal leaves a race condition where this is still happening.</p>  <p>In order to make it safe and easy to connect handlers there
are two helper functions: <link xref="Gio.Cancellable.connect"/> and
<link xref="Gio.Cancellable.disconnect"/> which protect against problems
like this.</p>  <p>An example of how to us this:
|[&lt;!-- language="C" --&gt;
    // Make sure we don't do unnecessary work if already cancelled
    if (g_cancellable_set_error_if_cancelled (cancellable, error))
      return;</p>  <p>    // Set up all the data needed to be able to handle cancellation
    // of the operation
    my_data = my_data_new (...);</p>  <p>    id = 0;
    if (cancellable)
      id = g_cancellable_connect (cancellable,
    			      G_CALLBACK (cancelled_handler)
    			      data, NULL);</p>  <p>    // cancellable operation here...</p>  <p>    g_cancellable_disconnect (cancellable, id);</p>  <p>    // cancelled_handler is never called after this, it is now safe
    // to free the data
    my_data_free (my_data);
]|</p>  <p>Note that the cancelled signal is emitted in the thread that
the user cancelled from, which may be the main thread. So, the
cancellable signal should not do something that can block.</p>

<terms>
<item>
<title><code>cancellable</code></title>
<p>instance of <link xref="Gio.Cancellable"/> that is emitting the signal</p>
</item>
</terms>

</page>
