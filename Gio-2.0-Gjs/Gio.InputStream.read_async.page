<?xml version="1.0"?>
<page id="Gio.InputStream.read_async"
      type="topic"
      style="method"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="Gio.InputStream" group="method" type="guide"/>
    <api:function>
      <api:returns>
        <api:type>void</api:type>
      </api:returns>
      <api:name>g_input_stream_read_async</api:name>
      <api:arg>
        <api:type>Array(guint8)</api:type>
        <api:name>buffer</api:name>
      </api:arg>
      <api:arg>
        <api:type>Number</api:type>
        <api:name>io_priority</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.Cancellable</api:type>
        <api:name>cancellable</api:name>
      </api:arg>
      <api:arg>
        <api:type>Gio.AsyncReadyCallback</api:type>
        <api:name>callback</api:name>
      </api:arg>
    </api:function>
  </info>
  <title>Gio.InputStream.prototype.read_async</title>
  <synopsis><code mime="text/x-gjs">
function read_async(buffer: Array(guint8), io_priority: Number, cancellable: Gio.Cancellable, callback: Gio.AsyncReadyCallback): void {
    // Gjs wrapper for g_input_stream_read_async()
}
  </code></synopsis>
  <p>Request an asynchronous read of <code>count</code> bytes from the stream into the buffer
starting at <code>buffer</code>. When the operation is finished <code>callback</code> will be called.
You can then call <link xref="Gio.read_finish"/> to get the result of the
operation.</p>  <p>During an async request no other sync and async calls are allowed on <code>stream</code>, and will
result in <link xref="Gio.IOErrorEnum"/>.pending errors.</p>  <p>A value of <code>count</code> larger than %G_MAXSSIZE will cause a <link xref="Gio.IOErrorEnum"/>.invalid_argument error.</p>  <p>On success, the number of bytes read into the buffer will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to read
as many bytes as requested. Zero is returned on end of file
(or if <code>count</code> is zero),  but never otherwise.</p>  <p>Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.</p>  <p>The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.</p>

<terms>
<item>
<title><code>buffer</code></title>
  <p>a buffer to
    read data into (which should be at least count bytes long).</p>
</item>
<item>
<title><code>io_priority</code></title>
  <p>the [I/O priority][io-priority]
of the request.</p>
</item>
<item>
<title><code>cancellable</code></title>
  <p>optional <link xref="Gio.Cancellable"/> object, <code>null</code> to ignore.</p>
</item>
<item>
<title><code>callback</code></title>
  <p>callback to call when the request is satisfied</p>
</item>
</terms>

</page>
