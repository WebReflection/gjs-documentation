<?xml version="1.0"?>
<page id="Gio.Application"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Gio.Application</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let application = new Gio.Application({
    <link xref='Gio.Application-application-id'>application_id</link>: value,
});
  </code></synopsis>
  <p>A <link xref="Gio.Application"/> is the foundation of an application.  It wraps some
low-level platform-specific services and is intended to act as the
foundation for higher-level application classes such as
#GtkApplication or #MxApplication.  In general, you should not use
this class outside of a higher level framework.</p>  <p>GApplication provides convenient life cycle management by maintaining
a "use count" for the primary application instance. The use count can
be changed using <link xref="Gio.Application.hold"/> and <link xref="Gio.Application.release"/>. If
it drops to zero, the application exits. Higher-level classes such as
#GtkApplication employ the use count to ensure that the application
stays alive as long as it has any opened windows.</p>  <p>Another feature that GApplication (optionally) provides is process
uniqueness. Applications can make use of this functionality by
providing a unique application ID. If given, only one application
with this ID can be running at a time per session. The session
concept is platform-dependent, but corresponds roughly to a graphical
desktop login. When your application is launched again, its
arguments are passed through platform communication to the already
running program. The already running instance of the program is
called the "primary instance"; for non-unique applications this is
the always the current instance. On Linux, the D-Bus session bus
is used for communication.</p>  <p>The use of <link xref="Gio.Application"/> differs from some other commonly-used
uniqueness libraries (such as libunique) in important ways. The
application is not expected to manually register itself and check
if it is the primary instance. Instead, the main() function of a
<link xref="Gio.Application"/> should do very little more than instantiating the
application instance, possibly connecting signal handlers, then
calling <link xref="Gio.Application.run"/>. All checks for uniqueness are done
internally. If the application is the primary instance then the
startup signal is emitted and the mainloop runs. If the application
is not the primary instance then a signal is sent to the primary
instance and <link xref="Gio.Application.run"/> promptly returns. See the code
examples below.</p>  <p>If used, the expected form of an application identifier is very close
to that of of a
[DBus bus name](http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-interface).
Examples include: "com.example.MyApp", "org.example.internal-apps.Calculator".
For details on valid application identifiers, see <link xref="Gio.Application.id_is_valid"/>.</p>  <p>On Linux, the application identifier is claimed as a well-known bus name
on the user's session bus.  This means that the uniqueness of your
application is scoped to the current session.  It also means that your
application may provide additional services (through registration of other
object paths) at that bus name.  The registration of these object paths
should be done with the shared GDBus session bus.  Note that due to the
internal architecture of GDBus, method calls can be dispatched at any time
(even if a main loop is not running).  For this reason, you must ensure that
any object paths that you wish to register are registered before <link xref="Gio.Application"/>
attempts to acquire the bus name of your application (which happens in
<link xref="Gio.Application.register"/>).  Unfortunately, this means that you cannot use
<link xref="Gio.Application.get_is_remote"/> to decide if you want to register object paths.</p>  <p>GApplication also implements the <link xref="Gio.ActionGroup"/> and <link xref="Gio.ActionMap"/>
interfaces and lets you easily export actions by adding them with
<link xref="Gio.ActionMap.add_action"/>. When invoking an action by calling
<link xref="Gio.ActionGroup.activate_action"/> on the application, it is always
invoked in the primary instance. The actions are also exported on
the session bus, and GIO provides the <link xref="Gio.DBusActionGroup"/> wrapper to
conveniently access them remotely. GIO provides a <link xref="Gio.DBusMenuModel"/> wrapper
for remote access to exported #GMenuModels.</p>  <p>There is a number of different entry points into a GApplication:</p>  <p>- via 'Activate' (i.e. just starting the application)</p>  <p>- via 'Open' (i.e. opening some files)</p>  <p>- by handling a command-line</p>  <p>- via activating an action</p>  <p>The <link xref="Gio.Application-startup"/> signal lets you handle the application
initialization for all of these in a single place.</p>  <p>Regardless of which of these entry points is used to start the
application, GApplication passes some "platform data from the
launching instance to the primary instance, in the form of a
<link xref="GLib.Variant"/> dictionary mapping strings to variants. To use platform
data, override the @before_emit or @after_emit virtual functions
in your <link xref="Gio.Application"/> subclass. When dealing with
<link xref="Gio.ApplicationCommandLine"/> objects, the platform data is
directly available via <link xref="Gio.ApplicationCommandLine.get_cwd"/>,
<link xref="Gio.ApplicationCommandLine.get_environ"/> and
<link xref="Gio.ApplicationCommandLine.get_platform_data"/>.</p>  <p>As the name indicates, the platform data may vary depending on the
operating system, but it always includes the current directory (key
"cwd"), and optionally the environment (ie the set of environment
variables and their values) of the calling process (key "environ").
The environment is only added to the platform data if the
<link xref="Gio.ApplicationFlags"/>.send_environment flag is set. <link xref="Gio.Application"/> subclasses
can add their own platform data by overriding the @add_platform_data
virtual function. For instance, #GtkApplication adds startup notification
data in this way.</p>  <p>To parse commandline arguments you may handle the
<link xref="Gio.Application-command-line"/> signal or override the local_command_line()
vfunc, to parse them in either the primary instance or the local instance,
respectively.</p>  <p>For an example of opening files with a GApplication, see
[gapplication-example-open.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-open.c).</p>  <p>For an example of using actions with GApplication, see
[gapplication-example-actions.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-actions.c).</p>  <p>For an example of using extra D-Bus hooks with GApplication, see
[gapplication-example-dbushooks.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-dbushooks.c).</p>
  <p>Since 2.28</p>
  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>GObject.Object</code>
      <item>
        <code>Gio.Application</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
