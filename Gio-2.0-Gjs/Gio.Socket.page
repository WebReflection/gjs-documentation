<?xml version="1.0"?>
<page id="Gio.Socket"
      type="guide"
      style="class"
      xmlns="http://projectmallard.org/1.0/"
      xmlns:api="http://projectmallard.org/experimental/api/"
      xmlns:ui="http://projectmallard.org/1.0/ui/">
  <info>
    <link xref="index" group="class" type="guide"/>
  </info>
  <title>Gio.Socket</title>
  <synopsis><code>
const Gio = imports.gi.Gio;

let socket = new Gio.Socket({
    <link xref='Gio.Socket-family'>family</link>: value,
    <link xref='Gio.Socket-fd'>fd</link>: value,
    <link xref='Gio.Socket-protocol'>protocol</link>: value,
    <link xref='Gio.Socket-type'>type</link>: value,
});
  </code></synopsis>
  <p>A <link xref="Gio.Socket"/> is a low-level networking primitive. It is a more or less
direct mapping of the BSD socket API in a portable GObject based API.
It supports both the UNIX socket implementations and winsock2 on Windows.</p>  <p><link xref="Gio.Socket"/> is the platform independent base upon which the higher level
network primitives are based. Applications are not typically meant to
use it directly, but rather through classes like <link xref="Gio.SocketClient"/>,
<link xref="Gio.SocketService"/> and <link xref="Gio.SocketConnection"/>. However there may be cases where
direct use of <link xref="Gio.Socket"/> is useful.</p>  <p><link xref="Gio.Socket"/> implements the <link xref="Gio.Initable"/> interface, so if it is manually constructed
by e.g. <link xref="GObject.Object.new"/> you must call <link xref="Gio.Initable.init"/> and check the
results before using the object. This is done automatically in
<link xref="Gio.Socket.new"/> and <link xref="Gio.Socket.new_from_fd"/>, so these functions can return
<code>null</code>.</p>  <p>Sockets operate in two general modes, blocking or non-blocking. When
in blocking mode all operations block until the requested operation
is finished or there is an error. In non-blocking mode all calls that
would block return immediately with a <link xref="Gio.IOErrorEnum"/>.would_block error.
To know when a call would successfully run you can call <link xref="Gio.Socket.condition_check"/>,
or <link xref="Gio.Socket.condition_wait"/>. You can also use <link xref="Gio.Socket.create_source"/> and
attach it to a <link xref="GLib.MainContext"/> to get callbacks when I/O is possible.
Note that all sockets are always set to non blocking mode in the system, and
blocking mode is emulated in GSocket.</p>  <p>When working in non-blocking mode applications should always be able to
handle getting a <link xref="Gio.IOErrorEnum"/>.would_block error even when some other
function said that I/O was possible. This can easily happen in case
of a race condition in the application, but it can also happen for other
reasons. For instance, on Windows a socket is always seen as writable
until a write returns <link xref="Gio.IOErrorEnum"/>.would_block.</p>  <p>#GSockets can be either connection oriented or datagram based.
For connection oriented types you must first establish a connection by
either connecting to an address or accepting a connection from another
address. For connectionless socket types the target/source address is
specified or received in each I/O operation.</p>  <p>All socket file descriptors are set to be close-on-exec.</p>  <p>Note that creating a <link xref="Gio.Socket"/> causes the signal %SIGPIPE to be
ignored for the remainder of the program. If you are writing a
command-line utility that uses <link xref="Gio.Socket"/>, you may need to take into
account the fact that your program will not automatically be killed
if it tries to write to %stdout after it has been closed.</p>
  <p>Since 2.22</p>
  <synopsis>
    <title>Hierarchy</title>
    <tree>
      <item>
        <code>GObject.Object</code>
      <item>
        <code>Gio.Socket</code>
      </item>
      </item>
    </tree>
  </synopsis>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="constructor" style="linklist">
    <title>Constructors</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="method" style="linklist">
    <title>Methods</title>
  </links>
  <links type="topic" ui:expanded="true"
         api:type="function" api:mime="text/x-gjs"
         groups="function" style="linklist">
    <title>Static Functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="property" style="linklist">
    <title>Properties</title>
  </links>
  <links type="topic" ui:expanded="true" groups="signal" style="linklist">
    <title>Signals</title>
  </links>
  <links type="topic" ui:expanded="true" groups="vfunc" style="linklist">
    <title>Virtual functions</title>
  </links>
  <links type="topic" ui:expanded="true" groups="field" style="linklist">
    <title>Fields</title>
  </links>
  <links type="topic" ui:expanded="true" groups="#first #default #last" style="linklist">
    <title>Other</title>
  </links>
</page>
